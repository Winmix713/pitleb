import { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { 
  Palette, 
  Layers, 
  Type, 
  Settings, 
  Sparkles, 
  Circle, 
  Square, 
  AlignLeft, 
  AlignCenter, 
  AlignRight, 
  AlignJustify,
  ChevronUp,
  ChevronDown,
  RotateCcw,
  Sliders,
  X,
  Box
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Slider } from "@/components/ui/slider";
import { Switch } from "@/components/ui/switch";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

interface DockbarProps {
  activeCard?: any;
  updateCard?: (updates: any) => void;
}

const DOCK_TOOLS = [
  { id: "style", icon: Palette, label: "Style Controls", color: "blue" },
  { id: "gradient", icon: Layers, label: "Gradient Builder", color: "orange" },
  { id: "shadow", icon: Box, label: "3D Shadow", color: "green" },
  { id: "text", icon: Type, label: "Typography", color: "teal" },
  { id: "effects", icon: Sparkles, label: "Advanced Effects", color: "pink" },
  { id: "presets", icon: Settings, label: "Smart Presets", color: "purple" },
];

export default function Dockbar({ activeCard = {}, updateCard = () => {} }: DockbarProps) {
  const [isExpanded, setIsExpanded] = useState(false);
  const [activeTool, setActiveTool] = useState("style");
  const [gradientAngle, setGradientAngle] = useState(135);

  const toggleExpanded = () => {
    setIsExpanded(!isExpanded);
  };

  const selectTool = (toolId: string) => {
    setActiveTool(toolId);
    if (!isExpanded) {
      setIsExpanded(true);
    }
  };

  const dockStyle = {
    position: 'fixed' as const,
    bottom: '24px',
    left: '50%',
    zIndex: 50,
    display: 'flex',
    gap: '8px',
    alignItems: 'flex-end',
    justifyContent: 'center',
    padding: '8px',
    background: 'linear-gradient(181deg, rgba(0, 0, 0, 0.1) 4.5%, rgba(255, 255, 255, 0.03) 99.51%)',
    backdropFilter: 'blur(10px)',
    WebkitBackdropFilter: 'blur(10px)',
    border: '1px solid rgba(255, 255, 255, 0.06)',
    borderRadius: 'calc(12px + 8px)',
    boxShadow: `
      0 0 1px 0 rgba(0, 0, 0, 0.2),
      0 2px 2px 0 rgba(0, 0, 0, 0.17),
      0 4px 3px 0 rgba(0, 0, 0, 0.1),
      0 7px 3px 0 rgba(0, 0, 0, 0.03),
      0 12px 3px 0 transparent,
      0 4px 4px 0 rgba(0, 0, 0, 0.25),
      inset 0 1px 0 0 rgba(255, 255, 255, 0.1)
    `,
    transform: 'translate3d(-50%, 0, 0)',
    userSelect: 'none' as const,
  };

  const toolButtonStyle = (tool: any, isActive: boolean) => ({
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    width: '48px',
    height: '48px',
    borderRadius: '12px',
    border: 'none',
    cursor: 'pointer',
    transition: 'all 0.2s ease',
    background: isActive 
      ? 'linear-gradient(135deg, rgba(255, 255, 255, 0.2), rgba(255, 255, 255, 0.1))'
      : 'transparent',
    backdropFilter: isActive ? 'blur(10px)' : 'none',
    color: '#ffffff',
    fontSize: '0',
    outline: 'none',
    transform: isActive ? 'scale(1.05)' : 'scale(1)',
    boxShadow: isActive 
      ? 'inset 0 1px 0 0 rgba(255, 255, 255, 0.2), 0 2px 8px 0 rgba(0, 0, 0, 0.3)'
      : 'none',
  });

  const expandButtonStyle = {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    width: '32px',
    height: '32px',
    borderRadius: '8px',
    border: 'none',
    cursor: 'pointer',
    background: 'rgba(255, 255, 255, 0.1)',
    color: '#ffffff',
    transition: 'all 0.2s ease',
    outline: 'none',
  };

  const getColorForTool = (toolId: string) => {
    const colorMap = {
      style: 'from-blue-500 to-purple-600',
      gradient: 'from-pink-500 to-orange-500',
      shadow: 'from-green-500 to-teal-500',
      text: 'from-teal-500 to-cyan-500',
      effects: 'from-pink-600 to-red-500',
      presets: 'from-purple-500 to-blue-600'
    };
    return colorMap[toolId as keyof typeof colorMap] || 'from-gray-500 to-gray-600';
  };

  const panelStyle = {
    position: 'absolute' as const,
    bottom: '100%',
    left: '0',
    right: '0',
    marginBottom: '12px',
    background: 'linear-gradient(181deg, rgba(0, 0, 0, 0.15) 4.5%, rgba(255, 255, 255, 0.05) 99.51%)',
    backdropFilter: 'blur(20px)',
    WebkitBackdropFilter: 'blur(20px)',
    border: '1px solid rgba(255, 255, 255, 0.08)',
    borderRadius: '16px',
    color: '#ffffff',
    minWidth: '400px',
    maxHeight: '500px',
    overflowY: 'auto' as const,
    boxShadow: `
      0 8px 32px 0 rgba(0, 0, 0, 0.4),
      inset 0 1px 0 0 rgba(255, 255, 255, 0.1)
    `,
  };

  // Get the current active tool data
  const currentTool = DOCK_TOOLS.find(t => t.id === activeTool);
  const ToolIcon = currentTool?.icon;

  return (
    <div style={dockStyle}>
      {/* Main Dock */}
      <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
        {DOCK_TOOLS.map((tool) => (
          <button
            key={tool.id}
            style={toolButtonStyle(tool, activeTool === tool.id)}
            onClick={() => selectTool(tool.id)}
            title={tool.label}
            onMouseEnter={(e) => {
              if (activeTool !== tool.id) {
                e.currentTarget.style.background = 'rgba(255, 255, 255, 0.08)';
                e.currentTarget.style.transform = 'scale(1.02)';
              }
            }}
            onMouseLeave={(e) => {
              if (activeTool !== tool.id) {
                e.currentTarget.style.background = 'transparent';
                e.currentTarget.style.transform = 'scale(1)';
              }
            }}
          >
            <tool.icon size={20} />
          </button>
        ))}
        
        <div style={{ width: '1px', height: '32px', background: 'rgba(255, 255, 255, 0.1)', margin: '0 4px' }} />
        
        <button
          style={expandButtonStyle}
          onClick={toggleExpanded}
          title={isExpanded ? "Collapse" : "Expand"}
          onMouseEnter={(e) => {
            e.currentTarget.style.background = 'rgba(255, 255, 255, 0.15)';
            e.currentTarget.style.transform = 'scale(1.05)';
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.background = 'rgba(255, 255, 255, 0.1)';
            e.currentTarget.style.transform = 'scale(1)';
          }}
        >
          {isExpanded ? <ChevronDown size={16} /> : <ChevronUp size={16} />}
        </button>
      </div>

      {/* Expanded Panel */}
      <AnimatePresence>
        {isExpanded && (
          <motion.div
            initial={{ opacity: 0, y: 10, scale: 0.95 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 10, scale: 0.95 }}
            transition={{ 
              type: "spring", 
              damping: 20, 
              stiffness: 300,
              duration: 0.3
            }}
            style={panelStyle}
          >
            {/* Panel Header */}
            <div className={`bg-gradient-to-r ${getColorForTool(activeTool)} p-6 relative overflow-hidden`}>
              <div className="absolute inset-0 bg-black/20"></div>
              <div className="relative z-10 flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-white/20 rounded-lg">
                    {ToolIcon && <ToolIcon className="w-5 h-5 text-white" />}
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-white">
                      {currentTool?.label}
                    </h3>
                    <p className="text-white/80 text-sm">Customize your card design</p>
                  </div>
                </div>
                <button
                  onClick={() => setIsExpanded(false)}
                  className="text-white/80 hover:text-white hover:bg-white/20 rounded-lg p-2 transition-colors"
                >
                  <X className="h-5 w-5" />
                </button>
              </div>
            </div>

            {/* Panel Content */}
            <div className="p-6 space-y-6">
              {activeTool === "style" && (
                <div className="space-y-6">
                  {/* Background Type */}
                  <div className="space-y-3">
                    <div className="flex items-center gap-2 mb-3">
                      <Circle className="w-4 h-4 text-purple-400" />
                      <span className="text-white font-medium">Background Type</span>
                    </div>
                    <div className="grid grid-cols-2 gap-3">
                      <button className="p-4 bg-purple-600/20 border border-purple-500/50 rounded-xl text-center hover:bg-purple-600/30 transition-colors">
                        <Circle className="w-6 h-6 mx-auto mb-2 text-purple-400" />
                        <div className="text-white text-sm font-medium">Solid</div>
                        <div className="text-gray-400 text-xs">Single color</div>
                      </button>
                      <button 
                        onClick={() => selectTool('gradient')}
                        className="p-4 bg-gray-800 border border-gray-600 rounded-xl text-center hover:bg-gray-700 transition-colors"
                      >
                        <Square className="w-6 h-6 mx-auto mb-2 text-gray-400" />
                        <div className="text-white text-sm font-medium">Gradient</div>
                        <div className="text-gray-400 text-xs">Color blend</div>
                      </button>
                    </div>
                  </div>

                  {/* Background Color */}
                  <div className="space-y-3">
                    <div className="flex items-center gap-2 mb-3">
                      <Circle className="w-4 h-4 text-purple-400" />
                      <span className="text-white font-medium">Background Color</span>
                    </div>
                    <div className="flex items-center gap-3">
                      <input
                        type="color"
                        value={activeCard.bgGradientFrom || "#3b82f6"}
                        onChange={(e) => updateCard({ bgGradientFrom: e.target.value })}
                        className="w-12 h-12 rounded-lg border-2 border-purple-500 cursor-pointer bg-transparent"
                      />
                      <div className="flex-1">
                        <span className="text-gray-400 text-sm">Opacity</span>
                        <div className="flex items-center gap-3 mt-2">
                          <Slider
                            value={[activeCard.cardOpacity || 100]}
                            onValueChange={([value]) => updateCard({ cardOpacity: value })}
                            max={100}
                            className="flex-1"
                          />
                          <span className="text-purple-400 font-medium min-w-[40px]">{activeCard.cardOpacity || 100}%</span>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Border Radius */}
                  <div className="space-y-3">
                    <span className="text-white font-medium">Border Radius</span>
                    <div className="bg-gray-800/50 p-4 rounded-xl">
                      <span className="text-gray-400 text-sm">Roundness</span>
                      <div className="flex items-center gap-3 mt-2">
                        <Slider
                          value={[parseInt(activeCard.cardBorderRadius?.topLeft || "12")]}
                          onValueChange={([value]) =>
                            updateCard({
                              cardBorderRadius: {
                                topLeft: value.toString(),
                                topRight: value.toString(),
                                bottomLeft: value.toString(),
                                bottomRight: value.toString(),
                                unit: "px"
                              }
                            })
                          }
                          max={50}
                          className="flex-1"
                        />
                        <span className="text-white font-medium min-w-[40px]">{activeCard.cardBorderRadius?.topLeft || 12}px</span>
                      </div>
                      <div className="grid grid-cols-4 gap-2 mt-3 text-xs text-gray-400">
                        <span>0px</span>
                        <span>8px</span>
                        <span>16px</span>
                        <span>32px</span>
                      </div>
                    </div>
                  </div>

                  {/* Special Effects */}
                  <div className="space-y-3">
                    <div className="flex items-center gap-2 mb-3">
                      <Sparkles className="w-4 h-4 text-purple-400" />
                      <span className="text-white font-medium">Special Effects</span>
                    </div>
                    <div className="bg-gray-800/50 p-4 rounded-xl">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <Sparkles className="w-5 h-5 text-purple-400" />
                          <div>
                            <div className="text-white font-medium">Glassmorphism</div>
                            <div className="text-gray-400 text-sm">Frosted glass effect</div>
                          </div>
                        </div>
                        <Switch 
                          checked={activeCard.enableHoverEffects || false}
                          onCheckedChange={(checked) => updateCard({ enableHoverEffects: checked })}
                        />
                      </div>
                    </div>
                  </div>

                  {/* Dimensions */}
                  <div className="space-y-3">
                    <span className="text-white font-medium">Dimensions</span>
                    <div className="grid grid-cols-2 gap-3">
                      <div>
                        <span className="text-gray-400 text-sm">Width</span>
                        <div className="flex items-center gap-2 mt-1">
                          <Slider
                            value={[parseInt(activeCard.cardWidth) || 300]}
                            onValueChange={([value]) => updateCard({ cardWidth: value.toString() })}
                            min={200}
                            max={600}
                            className="flex-1"
                          />
                          <span className="text-purple-400 font-medium min-w-[50px]">{activeCard.cardWidth || 300}px</span>
                        </div>
                      </div>
                      <div>
                        <span className="text-gray-400 text-sm">Height</span>
                        <div className="flex items-center gap-2 mt-1">
                          <Slider
                            value={[parseInt(activeCard.cardHeight) || 200]}
                            onValueChange={([value]) => updateCard({ cardHeight: value.toString() })}
                            min={150}
                            max={400}
                            className="flex-1"
                          />
                          <span className="text-purple-400 font-medium min-w-[50px]">{activeCard.cardHeight || 200}px</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {activeTool === "gradient" && (
                <div className="space-y-6">
                  {/* Gradient Preview */}
                  <div className="space-y-3">
                    <span className="text-white font-medium">Gradient Preview</span>
                    <div 
                      className="w-full h-20 rounded-xl border border-gray-600"
                      style={{
                        background: `linear-gradient(${gradientAngle}deg, ${activeCard.bgGradientFrom || "#667eea"}, ${activeCard.bgGradientTo || "#764ba2"})`
                      }}
                    ></div>
                  </div>

                  {/* Start and End Colors */}
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-3">
                      <span className="text-white font-medium">Start Color</span>
                      <input
                        type="color"
                        value={activeCard.bgGradientFrom || "#667eea"}
                        onChange={(e) => updateCard({ bgGradientFrom: e.target.value })}
                        className="w-full h-12 rounded-lg border-2 border-purple-500 cursor-pointer bg-transparent"
                      />
                      <div className="flex items-center gap-2 mt-2">
                        <Slider
                          value={[parseInt(activeCard.bgOpacityFrom || "100")]}
                          onValueChange={([value]) => updateCard({ bgOpacityFrom: value.toString() })}
                          max={100}
                          className="flex-1"
                        />
                        <span className="text-purple-400 font-medium min-w-[40px]">{activeCard.bgOpacityFrom || 100}%</span>
                      </div>
                    </div>

                    <div className="space-y-3">
                      <span className="text-white font-medium">End Color</span>
                      <input
                        type="color"
                        value={activeCard.bgGradientTo || "#764ba2"}
                        onChange={(e) => updateCard({ bgGradientTo: e.target.value })}
                        className="w-full h-12 rounded-lg border-2 border-purple-500 cursor-pointer bg-transparent"
                      />
                      <div className="flex items-center gap-2 mt-2">
                        <Slider
                          value={[parseInt(activeCard.bgOpacityTo || "100")]}
                          onValueChange={([value]) => updateCard({ bgOpacityTo: value.toString() })}
                          max={100}
                          className="flex-1"
                        />
                        <span className="text-purple-400 font-medium min-w-[40px]">{activeCard.bgOpacityTo || 100}%</span>
                      </div>
                    </div>
                  </div>

                  {/* Gradient Direction */}
                  <div className="space-y-3">
                    <span className="text-white font-medium">Gradient Direction</span>
                    <div className="flex items-center justify-center">
                      <div className="relative w-32 h-32 bg-gray-800 rounded-full border border-gray-600">
                        <div 
                          className="absolute top-1/2 left-1/2 w-16 h-1 bg-purple-500 rounded-full transform -translate-x-1/2 -translate-y-1/2 origin-center cursor-pointer"
                          style={{ transform: `translate(-50%, -50%) rotate(${gradientAngle}deg)` }}
                          onClick={() => {
                            const newAngle = (gradientAngle + 45) % 360;
                            setGradientAngle(newAngle);
                          }}
                        >
                          <div className="absolute right-0 top-1/2 w-3 h-3 bg-purple-400 rounded-full transform translate-x-1/2 -translate-y-1/2"></div>
                        </div>
                        <div className="absolute bottom-2 left-1/2 transform -translate-x-1/2 text-white text-sm font-medium">
                          {gradientAngle}°
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Preset Gradients */}
                  <div className="space-y-3">
                    <span className="text-white font-medium">Preset Gradients</span>
                    <div className="grid grid-cols-3 gap-3">
                      {[
                        { from: "#667eea", to: "#764ba2" },
                        { from: "#f093fb", to: "#f5576c" },
                        { from: "#4facfe", to: "#00f2fe" },
                        { from: "#43e97b", to: "#38f9d7" },
                        { from: "#fa709a", to: "#fee140" },
                        { from: "#a8edea", to: "#fed6e3" }
                      ].map((preset, index) => (
                        <button
                          key={index}
                          onClick={() => updateCard({ bgGradientFrom: preset.from, bgGradientTo: preset.to })}
                          className="h-12 rounded-lg border border-gray-600 hover:border-purple-500 transition-colors"
                          style={{ background: `linear-gradient(135deg, ${preset.from}, ${preset.to})` }}
                        />
                      ))}
                    </div>
                  </div>
                </div>
              )}

              {activeTool === "shadow" && (
                <div className="space-y-6">
                  {/* Primary Shadow */}
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <span className="text-white font-medium">Primary Shadow</span>
                      <Switch defaultChecked />
                    </div>
                    
                    {/* Shadow Position */}
                    <div className="space-y-3">
                      <span className="text-gray-400 text-sm">Shadow Position</span>
                      <div className="flex items-center justify-center">
                        <div className="relative w-32 h-32 bg-gray-800 rounded-lg border border-gray-600">
                          <div className="absolute top-1/2 left-1/2 w-8 h-8 bg-purple-500 rounded transform -translate-x-1/2 -translate-y-1/2 cursor-pointer"></div>
                          <div className="absolute bottom-2 left-1/2 transform -translate-x-1/2 text-white text-xs">
                            X: {activeCard.shadowSettings?.x || "0"}px, Y: {activeCard.shadowSettings?.y || "10"}px
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Blur and Spread */}
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <span className="text-gray-400 text-sm">Blur</span>
                        <div className="flex items-center gap-2 mt-1">
                          <Slider
                            value={[parseInt(activeCard.shadowSettings?.blur || "20")]}
                            onValueChange={([value]) => updateCard({ 
                              shadowSettings: { ...activeCard.shadowSettings, blur: value.toString() }
                            })}
                            max={100}
                            className="flex-1"
                          />
                          <span className="text-purple-400 font-medium min-w-[40px]">{activeCard.shadowSettings?.blur || "20"}px</span>
                        </div>
                      </div>
                      <div>
                        <span className="text-gray-400 text-sm">Spread</span>
                        <div className="flex items-center gap-2 mt-1">
                          <Slider
                            value={[parseInt(activeCard.shadowSettings?.spread || "0")]}
                            onValueChange={([value]) => updateCard({ 
                              shadowSettings: { ...activeCard.shadowSettings, spread: value.toString() }
                            })}
                            max={50}
                            className="flex-1"
                          />
                          <span className="text-purple-400 font-medium min-w-[40px]">{activeCard.shadowSettings?.spread || "0"}px</span>
                        </div>
                      </div>
                    </div>

                    {/* Shadow Color and Opacity */}
                    <div className="flex items-center gap-3">
                      <input
                        type="color"
                        value={activeCard.shadowColor || "#000000"}
                        onChange={(e) => updateCard({ shadowColor: e.target.value })}
                        className="w-12 h-12 rounded-lg border-2 border-purple-500 cursor-pointer bg-transparent"
                      />
                      <div className="flex-1">
                        <span className="text-gray-400 text-sm">Opacity: {Math.round(parseFloat(activeCard.shadowOpacity || "0.25") * 100)}%</span>
                        <Slider
                          value={[Math.round(parseFloat(activeCard.shadowOpacity || "0.25") * 100)]}
                          onValueChange={([value]) => updateCard({ shadowOpacity: (value / 100).toString() })}
                          max={100}
                          className="mt-2"
                        />
                      </div>
                    </div>
                  </div>

                  {/* Secondary Shadow */}
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <span className="text-white font-medium">Secondary Shadow</span>
                      <Switch />
                    </div>
                    
                    <div className="opacity-50 space-y-3">
                      <div className="flex items-center justify-center">
                        <div className="relative w-32 h-32 bg-gray-800 rounded-lg border border-gray-600">
                          <div className="absolute top-1/2 left-1/2 w-8 h-8 bg-gray-600 rounded transform -translate-x-1/2 -translate-y-1/2"></div>
                          <div className="absolute bottom-2 left-1/2 transform -translate-x-1/2 text-gray-500 text-xs">
                            X: 0px, Y: 4px
                          </div>
                        </div>
                      </div>

                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <span className="text-gray-500 text-sm">Blur</span>
                          <Slider value={[6]} max={100} className="mt-1" disabled />
                          <span className="text-gray-500 text-xs">6px</span>
                        </div>
                        <div>
                          <span className="text-gray-500 text-sm">Spread</span>
                          <Slider value={[0]} max={50} className="mt-1" disabled />
                          <span className="text-gray-500 text-xs">-1px</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {activeTool === "text" && (
                <div className="space-y-6">
                  {/* Typography Header */}
                  <div className="flex items-center gap-2">
                    <Type className="w-5 h-5 text-teal-400" />
                    <span className="text-white font-medium">Typography</span>
                  </div>

                  {/* Title Settings */}
                  <div className="bg-gray-800/50 p-4 rounded-xl space-y-4">
                    <span className="text-white font-medium">Title Settings</span>
                    
                    <div className="grid grid-cols-2 gap-3">
                      <div>
                        <span className="text-gray-400 text-sm">Font Family</span>
                        <Select value={activeCard.titleFont || "Inter"} onValueChange={(value) => updateCard({ titleFont: value })}>
                          <SelectTrigger className="bg-gray-700 border-gray-600 text-white mt-1">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="Inter">Inter</SelectItem>
                            <SelectItem value="Arial">Arial</SelectItem>
                            <SelectItem value="Helvetica">Helvetica</SelectItem>
                            <SelectItem value="Georgia">Georgia</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <span className="text-gray-400 text-sm">Font Weight</span>
                        <Select value={activeCard.titleWeight || "600"} onValueChange={(value) => updateCard({ titleWeight: value })}>
                          <SelectTrigger className="bg-gray-700 border-gray-600 text-white mt-1">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="400">Normal</SelectItem>
                            <SelectItem value="500">Medium</SelectItem>
                            <SelectItem value="600">Semibold</SelectItem>
                            <SelectItem value="700">Bold</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>

                    <div className="grid grid-cols-2 gap-3">
                      <div>
                        <span className="text-gray-400 text-sm">Font Size</span>
                        <div className="flex items-center gap-2 mt-1">
                          <Slider
                            value={[activeCard.titleSize || 18]}
                            onValueChange={([value]) => updateCard({ titleSize: value })}
                            min={12}
                            max={48}
                            className="flex-1"
                          />
                          <span className="text-purple-400 font-medium min-w-[40px]">{activeCard.titleSize || 18}px</span>
                        </div>
                      </div>
                      <div>
                        <span className="text-gray-400 text-sm">Text Alignment</span>
                        <div className="flex gap-1 mt-1">
                          {[
                            { icon: AlignLeft, value: "left" },
                            { icon: AlignCenter, value: "center" },
                            { icon: AlignRight, value: "right" },
                            { icon: AlignJustify, value: "justify" }
                          ].map(({ icon: Icon, value }) => (
                            <button
                              key={value}
                              onClick={() => updateCard({ titleAlign: value })}
                              className={`p-2 rounded border ${
                                activeCard.titleAlign === value 
                                  ? "bg-purple-600 border-purple-500" 
                                  : "bg-gray-700 border-gray-600 hover:bg-gray-600"
                              } transition-colors`}
                            >
                              <Icon className="w-4 h-4 text-white" />
                            </button>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Description Settings */}
                  <div className="bg-gray-800/50 p-4 rounded-xl space-y-4">
                    <span className="text-white font-medium">Description Settings</span>
                    
                    <div className="grid grid-cols-2 gap-3">
                      <div>
                        <span className="text-gray-400 text-sm">Font Family</span>
                        <Select value={activeCard.descriptionFont || "Inter"} onValueChange={(value) => updateCard({ descriptionFont: value })}>
                          <SelectTrigger className="bg-gray-700 border-gray-600 text-white mt-1">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="Inter">Inter</SelectItem>
                            <SelectItem value="Arial">Arial</SelectItem>
                            <SelectItem value="Helvetica">Helvetica</SelectItem>
                            <SelectItem value="Georgia">Georgia</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <span className="text-gray-400 text-sm">Font Weight</span>
                        <Select value={activeCard.descriptionWeight || "400"} onValueChange={(value) => updateCard({ descriptionWeight: value })}>
                          <SelectTrigger className="bg-gray-700 border-gray-600 text-white mt-1">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="400">Normal</SelectItem>
                            <SelectItem value="500">Medium</SelectItem>
                            <SelectItem value="600">Semibold</SelectItem>
                            <SelectItem value="700">Bold</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>

                    <div className="grid grid-cols-2 gap-3">
                      <div>
                        <span className="text-gray-400 text-sm">Font Size</span>
                        <div className="flex items-center gap-2 mt-1">
                          <Slider
                            value={[activeCard.descriptionSize || 14]}
                            onValueChange={([value]) => updateCard({ descriptionSize: value })}
                            min={10}
                            max={32}
                            className="flex-1"
                          />
                          <span className="text-purple-400 font-medium min-w-[40px]">{activeCard.descriptionSize || 14}px</span>
                        </div>
                      </div>
                      <div>
                        <span className="text-gray-400 text-sm">Text Alignment</span>
                        <div className="flex gap-1 mt-1">
                          {[
                            { icon: AlignLeft, value: "left" },
                            { icon: AlignCenter, value: "center" },
                            { icon: AlignRight, value: "right" },
                            { icon: AlignJustify, value: "justify" }
                          ].map(({ icon: Icon, value }) => (
                            <button
                              key={value}
                              onClick={() => updateCard({ descriptionAlign: value })}
                              className={`p-2 rounded border ${
                                activeCard.descriptionAlign === value 
                                  ? "bg-purple-600 border-purple-500" 
                                  : "bg-gray-700 border-gray-600 hover:bg-gray-600"
                              } transition-colors`}
                            >
                              <Icon className="w-4 h-4 text-white" />
                            </button>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {activeTool === "effects" && (
                <div className="space-y-6">
                  {/* Advanced Effects Header */}
                  <div className="flex items-center gap-2">
                    <Sparkles className="w-5 h-5 text-pink-400" />
                    <span className="text-white font-medium">Advanced Effects</span>
                  </div>

                  {/* Transform */}
                  <div className="bg-gray-800/50 p-4 rounded-xl space-y-4">
                    <span className="text-white font-medium flex items-center gap-2">
                      <RotateCcw className="w-4 h-4" />
                      Transform
                    </span>
                    
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <span className="text-gray-400 text-sm">Rotation</span>
                        <div className="flex items-center gap-2 mt-1">
                          <Slider
                            value={[activeCard.rotation || 0]}
                            onValueChange={([value]) => updateCard({ rotation: value })}
                            min={-180}
                            max={180}
                            className="flex-1"
                          />
                          <span className="text-purple-400 font-medium min-w-[40px]">{activeCard.rotation || 0}°</span>
                        </div>
                      </div>
                      <div>
                        <span className="text-gray-400 text-sm">Scale X</span>
                        <div className="flex items-center gap-2 mt-1">
                          <Slider
                            value={[((activeCard.scaleX || 1) * 100)]}
                            onValueChange={([value]) => updateCard({ scaleX: value / 100 })}
                            min={50}
                            max={200}
                            className="flex-1"
                          />
                          <span className="text-purple-400 font-medium min-w-[40px]">{activeCard.scaleX || 1}x</span>
                        </div>
                      </div>
                    </div>

                    <div>
                      <span className="text-gray-400 text-sm">Scale Y</span>
                      <div className="flex items-center gap-2 mt-1">
                        <Slider
                          value={[((activeCard.scaleY || 1) * 100)]}
                          onValueChange={([value]) => updateCard({ scaleY: value / 100 })}
                          min={50}
                          max={200}
                          className="flex-1"
                        />
                        <span className="text-purple-400 font-medium min-w-[40px]">{activeCard.scaleY || 1}x</span>
                      </div>
                    </div>
                  </div>

                  {/* Filters */}
                  <div className="bg-gray-800/50 p-4 rounded-xl space-y-4">
                    <span className="text-white font-medium flex items-center gap-2">
                      <Circle className="w-4 h-4" />
                      Filters
                    </span>
                    
                    <div className="space-y-3">
                      <div>
                        <div className="flex items-center justify-between">
                          <span className="text-gray-400 text-sm">Blur</span>
                          <span className="text-purple-400 font-medium text-sm">{activeCard.blur || 0}px</span>
                        </div>
                        <Slider
                          value={[activeCard.blur || 0]}
                          onValueChange={([value]) => updateCard({ blur: value })}
                          max={20}
                          step={0.1}
                          className="mt-1"
                        />
                      </div>

                      <div>
                        <div className="flex items-center justify-between">
                          <span className="text-gray-400 text-sm">Brightness</span>
                          <span className="text-purple-400 font-medium text-sm">{activeCard.brightness || 100}%</span>
                        </div>
                        <Slider
                          value={[activeCard.brightness || 100]}
                          onValueChange={([value]) => updateCard({ brightness: value })}
                          min={0}
                          max={200}
                          className="mt-1"
                        />
                      </div>

                      <div>
                        <div className="flex items-center justify-between">
                          <span className="text-gray-400 text-sm">Contrast</span>
                          <span className="text-purple-400 font-medium text-sm">{activeCard.contrast || 100}%</span>
                        </div>
                        <Slider
                          value={[activeCard.contrast || 100]}
                          onValueChange={([value]) => updateCard({ contrast: value })}
                          min={0}
                          max={200}
                          className="mt-1"
                        />
                      </div>

                      <div>
                        <div className="flex items-center justify-between">
                          <span className="text-gray-400 text-sm">Saturation</span>
                          <span className="text-purple-400 font-medium text-sm">{activeCard.saturation || 100}%</span>
                        </div>
                        <Slider
                          value={[activeCard.saturation || 100]}
                          onValueChange={([value]) => updateCard({ saturation: value })}
                          min={0}
                          max={200}
                          className="mt-1"
                        />
                      </div>
                    </div>
                  </div>

                  {/* Reset Button */}
                  <Button 
                    onClick={() => updateCard({ 
                      rotation: 0, 
                      scaleX: 1, 
                      scaleY: 1, 
                      blur: 0, 
                      brightness: 100, 
                      contrast: 100, 
                      saturation: 100 
                    })}
                    className="w-full bg-gradient-to-r from-orange-600 to-red-600 hover:from-orange-700 hover:to-red-700 text-white font-medium py-3 rounded-xl"
                  >
                    Reset All Effects
                  </Button>
                </div>
              )}

              {activeTool === "presets" && (
                <div className="space-y-6">
                  {/* Smart Presets */}
                  <span className="text-white font-medium">Smart Presets</span>
                  
                  <div className="space-y-4">
                    {[
                      {
                        name: "Glassmorphism",
                        description: "Modern",
                        gradient: "from-white/10 to-white/5",
                        config: {
                          bgGradientFrom: "#ffffff20",
                          bgGradientTo: "#ffffff10",
                          cardBorderRadius: { topLeft: "20", topRight: "20", bottomLeft: "20", bottomRight: "20", unit: "px" },
                          enableHoverEffects: true
                        }
                      },
                      {
                        name: "Neon Glow",
                        description: "Vibrant",
                        gradient: "from-purple-600 to-blue-600",
                        config: {
                          bgGradientFrom: "#8b5cf6",
                          bgGradientTo: "#3b82f6",
                          shadowColor: "#8b5cf6",
                          enableAnimations: true
                        }
                      },
                      {
                        name: "Gradient Dream",
                        description: "Gradient",
                        gradient: "from-pink-500 to-violet-600",
                        config: {
                          bgGradientFrom: "#ec4899",
                          bgGradientTo: "#8b5cf6",
                          cardBorderRadius: { topLeft: "16", topRight: "16", bottomLeft: "16", bottomRight: "16", unit: "px" }
                        }
                      },
                      {
                        name: "Minimal Clean",
                        description: "Minimal",
                        gradient: "from-white to-gray-50",
                        config: {
                          bgGradientFrom: "#ffffff",
                          bgGradientTo: "#f9fafb",
                          cardBorderRadius: { topLeft: "8", topRight: "8", bottomLeft: "8", bottomRight: "8", unit: "px" },
                          shadowColor: "#00000020"
                        }
                      }
                    ].map((preset, index) => (
                      <button
                        key={index}
                        onClick={() => updateCard(preset.config)}
                        className="w-full p-4 bg-gray-800 border border-gray-600 rounded-xl text-left hover:border-purple-500 transition-colors group"
                      >
                        <div className="flex items-center gap-3">
                          <Sparkles className="w-5 h-5 text-purple-400" />
                          <div className="flex-1">
                            <div className="text-white font-medium">{preset.name}</div>
                            <div className="text-gray-400 text-sm">{preset.description}</div>
                          </div>
                        </div>
                        <div 
                          className={`w-full h-8 rounded-lg mt-3 bg-gradient-to-r ${preset.gradient}`}
                        ></div>
                      </button>
                    ))}
                  </div>

                  {/* Quick Actions */}
                  <div className="space-y-3">
                    <span className="text-white font-medium">Quick Actions</span>
                    <Button 
                      onClick={() => {
                        // Randomize logic here
                        const colors = ["#ff6b6b", "#4ecdc4", "#45b7d1", "#96ceb4", "#ffeaa7", "#dda0dd", "#98d8c8"];
                        const randomFrom = colors[Math.floor(Math.random() * colors.length)];
                        const randomTo = colors[Math.floor(Math.random() * colors.length)];
                        updateCard({
                          bgGradientFrom: randomFrom,
                          bgGradientTo: randomTo,
                          rotation: Math.random() * 20 - 10,
                          cardBorderRadius: {
                            topLeft: (Math.random() * 30 + 10).toString(),
                            topRight: (Math.random() * 30 + 10).toString(),
                            bottomLeft: (Math.random() * 30 + 10).toString(),
                            bottomRight: (Math.random() * 30 + 10).toString(),
                            unit: "px"
                          }
                        });
                      }}
                      className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white font-medium py-3 rounded-xl flex items-center justify-center gap-2"
                    >
                      <Sparkles className="w-4 h-4" />
                      Randomize
                    </Button>
                  </div>
                </div>
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}
