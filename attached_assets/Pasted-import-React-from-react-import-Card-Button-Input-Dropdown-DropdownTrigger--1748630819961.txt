import React from "react";
import {
  Card,
  Button,
  Input,
  Dropdown,
  DropdownTrigger,
  DropdownMenu,
  DropdownItem,
  Modal,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
  Tooltip,
  useDisclosure,
  Tabs,
  Tab,
  Switch,
  Spinner
} from "@heroui/react";
import { motion, AnimatePresence } from "framer-motion";
import { Icon } from "@iconify/react";

// Types
interface CardData {
  id: string;
  title: string;
  description: string;
  bgGradientFrom: string;
  bgGradientTo: string;
  bgOpacityFrom: string;
  bgOpacityTo: string;
  shadowColor: string;
  shadowOpacity: string;
  enableHoverEffects: boolean;
  enableAnimations: boolean;
  cardWidth: string;
  cardHeight: string;
  cardPadding: string;
  cardBorderRadius: {
    topLeft: string;
    topRight: string;
    bottomLeft: string;
    bottomRight: string;
    unit: string;
  };
  cardOpacity: number;
  shadowSettings: {
    inset: boolean;
    x: string;
    y: string;
    blur: string;
    spread: string;
  };
  shadow2Settings?: {
    inset: boolean;
    x: string;
    y: string;
    blur: string;
    spread: string;
    color: string;
    opacity: string;
  };
  titleFont?: string;
  titleSize?: number;
  titleWeight?: string;
  titleAlign?: string;
  descriptionFont?: string;
  descriptionSize?: number;
  descriptionWeight?: string;
  descriptionAlign?: string;
  rotation?: number;
  scaleX?: number;
  scaleY?: number;
  blur?: number;
  brightness?: number;
  contrast?: number;
  saturation?: number;
}

interface Template {
  id: string;
  name: string;
  category: string;
  description: string;
  tags: string[];
  preview: string;
  author: string;
  downloads: number;
  rating: number;
  isPremium: boolean;
  createdAt: string;
  data: Partial<CardData>;
}

interface CardStyle {
  width: number;
  height: number | "auto";
  background: string;
  borderRadius: number;
  boxShadow: string;
  padding: number;
  opacity: number;
  color: string;
  transform: string;
  border?: string;
  backdropFilter?: string;
}

// Sample templates data
const templates: Template[] = [
  {
    id: "modern-business",
    name: "Modern Business",
    category: "Business",
    description: "Clean and professional design perfect for corporate presentations",
    tags: ["professional", "clean", "corporate", "minimal"],
    preview: "business",
    author: "Design Studio",
    downloads: 1250,
    rating: 4.8,
    isPremium: false,
    createdAt: "2024-01-15",
    data: {
      title: "John Anderson",
      description: "Senior Product Manager",
      bgGradientFrom: "#667eea",
      bgGradientTo: "#764ba2",
      bgOpacityFrom: "0.9",
      bgOpacityTo: "0.7",
      cardWidth: "350",
      cardHeight: "200",
      cardBorderRadius: {
        topLeft: "12",
        topRight: "12",
        bottomLeft: "12",
        bottomRight: "12",
        unit: "px",
      },
      shadowSettings: {
        inset: false,
        x: "0",
        y: "8",
        blur: "25",
        spread: "0",
      },
      shadowColor: "#667eea",
      shadowOpacity: "0.3",
    },
  },
  {
    id: "social-gradient",
    name: "Social Media",
    category: "Social Media",
    description: "Eye-catching gradient design for social media posts",
    tags: ["social", "gradient", "colorful", "engaging"],
    preview: "social",
    author: "Creative Team",
    downloads: 2100,
    rating: 4.9,
    isPremium: false,
    createdAt: "2024-01-20",
    data: {
      title: "Follow Us Today!",
      description: "Join our community for daily inspiration",
      bgGradientFrom: "#ff6b6b",
      bgGradientTo: "#feca57",
      bgOpacityFrom: "1",
      bgOpacityTo: "0.8",
      cardWidth: "400",
      cardHeight: "400",
      cardBorderRadius: {
        topLeft: "20",
        topRight: "20",
        bottomLeft: "20",
        bottomRight: "20",
        unit: "px",
      },
      shadowSettings: {
        inset: false,
        x: "0",
        y: "15",
        blur: "35",
        spread: "0",
      },
      shadowColor: "#ff6b6b",
      shadowOpacity: "0.4",
    },
  },
  {
    id: "neon-gaming",
    name: "Neon Gaming",
    category: "Gaming",
    description: "Futuristic cyberpunk design perfect for gaming content",
    tags: ["gaming", "neon", "cyberpunk", "futuristic"],
    preview: "game",
    author: "Cyber Studios",
    downloads: 1750,
    rating: 4.9,
    isPremium: true,
    createdAt: "2024-02-01",
    data: {
      title: "CYBER WARRIOR",
      description: "Enter the digital battlefield",
      bgGradientFrom: "#0f0f23",
      bgGradientTo: "#1a1a2e",
      bgOpacityFrom: "1",
      bgOpacityTo: "1",
      cardWidth: "380",
      cardHeight: "220",
      cardBorderRadius: {
        topLeft: "15",
        topRight: "15",
        bottomLeft: "15",
        bottomRight: "15",
        unit: "px",
      },
      shadowSettings: {
        inset: false,
        x: "0",
        y: "0",
        blur: "20",
        spread: "0",
      },
      shadowColor: "#00ffff",
      shadowOpacity: "0.6",
    },
  },
  {
    id: "minimal-portfolio",
    name: "Minimal Portfolio",
    category: "Portfolio",
    description: "Simple and elegant design for creative portfolios",
    tags: ["minimal", "portfolio", "clean", "elegant"],
    preview: "portfolio",
    author: "Minimal Studio",
    downloads: 890,
    rating: 4.7,
    isPremium: false,
    createdAt: "2024-01-25",
    data: {
      title: "Creative Designer",
      description: "Crafting beautiful digital experiences",
      bgGradientFrom: "#ffffff",
      bgGradientTo: "#f8f9fa",
      bgOpacityFrom: "1",
      bgOpacityTo: "1",
      cardWidth: "320",
      cardHeight: "200",
      cardBorderRadius: {
        topLeft: "8",
        topRight: "8",
        bottomLeft: "8",
        bottomRight: "8",
        unit: "px",
      },
      shadowSettings: {
        inset: false,
        x: "0",
        y: "2",
        blur: "8",
        spread: "0",
      },
      shadowColor: "#000000",
      shadowOpacity: "0.1",
    },
  },
  {
    id: "tech-startup",
    name: "Tech Startup",
    category: "Technology",
    description: "Modern tech-focused design perfect for startups",
    tags: ["tech", "startup", "modern", "innovation"],
    preview: "dashboard",
    author: "Tech Innovators",
    downloads: 1420,
    rating: 4.8,
    isPremium: true,
    createdAt: "2024-02-15",
    data: {
      title: "InnovateTech",
      description: "Revolutionizing the future with technology",
      bgGradientFrom: "#8b5cf6",
      bgGradientTo: "#3b82f6",
      bgOpacityFrom: "0.9",
      bgOpacityTo: "0.7",
      cardWidth: "350",
      cardHeight: "210",
      cardBorderRadius: {
        topLeft: "16",
        topRight: "16",
        bottomLeft: "16",
        bottomRight: "16",
        unit: "px",
      },
      shadowSettings: {
        inset: false,
        x: "0",
        y: "12",
        blur: "28",
        spread: "0",
      },
      shadowColor: "#8b5cf6",
      shadowOpacity: "0.35",
    },
  },
  {
    id: "creative-agency",
    name: "Creative Agency",
    category: "Creative",
    description: "Bold and artistic design for creative agencies",
    tags: ["creative", "artistic", "vibrant", "agency"],
    preview: "fashion",
    author: "Creative Minds",
    downloads: 1100,
    rating: 4.7,
    isPremium: false,
    createdAt: "2024-02-20",
    data: {
      title: "Creative Studio",
      description: "Where imagination meets innovation",
      bgGradientFrom: "#ec4899",
      bgGradientTo: "#f97316",
      bgOpacityFrom: "0.9",
      bgOpacityTo: "0.8",
      cardWidth: "360",
      cardHeight: "220",
      cardBorderRadius: {
        topLeft: "18",
        topRight: "18",
        bottomLeft: "18",
        bottomRight: "18",
        unit: "px",
      },
      shadowSettings: {
        inset: false,
        x: "0",
        y: "14",
        blur: "32",
        spread: "0",
      },
      shadowColor: "#ec4899",
      shadowOpacity: "0.4",
    },
  },
];

const templateCategories = ["All", "Business", "Social Media", "Portfolio", "Gaming", "Technology", "Creative"];

// Utility functions
const createDefaultCard = (): CardData => ({
  id: Date.now().toString(),
  title: "Modern Card",
  description: "Live preview with real-time updates",
  bgGradientFrom: "#523091",
  bgGradientTo: "#1a0b33",
  bgOpacityFrom: "0.70",
  bgOpacityTo: "0.14",
  shadowColor: "#7c3aed",
  shadowOpacity: "0.3",
  enableHoverEffects: true,
  enableAnimations: true,
  cardWidth: "320",
  cardHeight: "200",
  cardPadding: "24",
  cardBorderRadius: {
    topLeft: "16",
    topRight: "16",
    bottomLeft: "16",
    bottomRight: "16",
    unit: "px",
  },
  cardOpacity: 100,
  shadowSettings: {
    inset: false,
    x: "0",
    y: "30",
    blur: "50",
    spread: "0",
  },
  shadow2Settings: {
    inset: true,
    x: "0",
    y: "1",
    blur: "0",
    spread: "0",
    color: "#ffffff",
    opacity: "0.1",
  },
  titleFont: "Inter",
  titleSize: 18,
  titleWeight: "600",
  titleAlign: "left",
  descriptionFont: "Inter",
  descriptionSize: 14,
  descriptionWeight: "400",
  descriptionAlign: "left",
  rotation: 0,
  scaleX: 1,
  scaleY: 1,
  blur: 0,
  brightness: 100,
  contrast: 100,
  saturation: 100,
});

const generateCardStyle = (card: CardData): CardStyle => {
  const hexToRgb = (hex: string) => {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result
      ? {
          r: Number.parseInt(result[1], 16),
          g: Number.parseInt(result[2], 16),
          b: Number.parseInt(result[3], 16),
        }
      : { r: 82, g: 48, b: 145 };
  };

  const bgFromRgb = hexToRgb(card.bgGradientFrom || "#523091");
  const bgToRgb = hexToRgb(card.bgGradientTo || "#1a0b33");
  const shadowRgb = hexToRgb(card.shadowColor || "#7c3aed");
  const shadow2Rgb = hexToRgb(card.shadow2Settings?.color || "#ffffff");
  const borderRgb = hexToRgb(borderColor || "#ffffff");

  const shadow = `${card.shadowSettings?.inset ? "inset " : ""}${card.shadowSettings?.x || "0"}px ${
    card.shadowSettings?.y || "30"
  }px ${card.shadowSettings?.blur || "50"}px ${card.shadowSettings?.spread || "0"}px rgba(${
    shadowRgb.r
  }, ${shadowRgb.g}, ${shadowRgb.b}, ${card.shadowOpacity || "0.3"})`;

  const secondShadow = card.shadow2Settings
    ? `, ${card.shadow2Settings.inset ? "inset " : ""}${card.shadow2Settings.x}px ${card.shadow2Settings.y}px ${
        card.shadow2Settings.blur
      }px ${card.shadow2Settings.spread}px rgba(${shadow2Rgb.r}, ${shadow2Rgb.g}, ${shadow2Rgb.b}, ${
        card.shadow2Settings.opacity
      })`
    : "";

  const transform = `rotate(${card.rotation || 0}deg) scaleX(${card.scaleX || 1}) scaleY(${card.scaleY || 1})`;
  
  // Use background type from state
  const background = backgroundType === "solid"
    ? `rgba(${bgFromRgb.r}, ${bgFromRgb.g}, ${bgFromRgb.b}, ${card.bgOpacityFrom || "0.7"})`
    : `radial-gradient(86.88% 75.47% at 50.00% 24.53%, rgba(${bgFromRgb.r}, ${
        bgFromRgb.g
      }, ${bgFromRgb.b}, ${card.bgOpacityFrom || "0.7"}), rgba(${bgToRgb.r}, ${bgToRgb.g}, ${
        bgToRgb.b
      }, ${card.bgOpacityTo || "0.14"}))`;

  // Use border settings from state
  const border = borderWidth > 0 
    ? `${borderWidth}px ${borderStyle} rgba(${borderRgb.r}, ${borderRgb.g}, ${borderRgb.b}, ${borderOpacity / 100})`
    : "none";
  
  // Use glassmorphism settings from state
  const backdropFilter = glassmorphismEnabled ? `blur(${backdropBlur}px)` : "none";

  return {
    width: Number.parseInt(card.cardWidth || "320"),
    height: card.cardHeight === "auto" ? "auto" : Number.parseInt(card.cardHeight || "200"),
    background,
    borderRadius: Number.parseInt(card.cardBorderRadius?.topLeft || "16"),
    boxShadow: `${shadow}${secondShadow}`,
    padding: Number.parseInt(card.cardPadding || "24"),
    opacity: (card.cardOpacity || 100) / 100,
    color: "white",
    transform,
    border,
    backdropFilter,
  };
};

// Main component
export default function App() {
  // State
  const [activeCard, setActiveCard] = React.useState<CardData>(createDefaultCard());
  const [history, setHistory] = React.useState<CardData[]>([createDefaultCard()]);
  const [historyIndex, setHistoryIndex] = React.useState(0);
  const [activeTab, setActiveTab] = React.useState<"basic" | "style" | "effects" | "code">("basic");
  const [searchTerm, setSearchTerm] = React.useState("");
  const [selectedCategory, setSelectedCategory] = React.useState("All");
  const [viewMode, setViewMode] = React.useState<"grid" | "list">("grid");
  const [sortBy, setSortBy] = React.useState<"popular" | "newest" | "rating">("popular");

  // Additional state
  const [sidebarOpen, setSidebarOpen] = React.useState(true);
  const [selectedTags, setSelectedTags] = React.useState<string[]>([]);
  const [showPremiumOnly, setShowPremiumOnly] = React.useState(false);
  const [showFreeOnly, setShowFreeOnly] = React.useState(false);
  const [floatingPanelMode, setFloatingPanelMode] = React.useState<"style" | "gradient" | "shadow">("style");

  // Gradient state
  const [startColor, setStartColor] = React.useState("#6366f1");
  const [endColor, setEndColor] = React.useState("#8b5cf6");
  const [startOpacity, setStartOpacity] = React.useState(100);
  const [endOpacity, setEndOpacity] = React.useState(100);
  const [gradientAngle, setGradientAngle] = React.useState(135);

  // Shadow state
  const [primaryShadow, setPrimaryShadow] = React.useState({
    x: 0,
    y: 10,
    blur: 20,
    spread: 0,
    color: "#000000",
    opacity: 25,
    enabled: true,
  });

  // New state for background customization
  const [backgroundType, setBackgroundType] = React.useState<"solid" | "gradient">("gradient");
  const [glassmorphismEnabled, setGlassmorphismEnabled] = React.useState(false);
  const [backdropBlur, setBackdropBlur] = React.useState(0);
  
  // New state for border customization
  const [linkedBorderRadius, setLinkedBorderRadius] = React.useState(true);
  const [borderStyle, setBorderStyle] = React.useState("solid");
  const [borderWidth, setBorderWidth] = React.useState(0);
  const [borderColor, setBorderColor] = React.useState("#ffffff");
  const [borderOpacity, setBorderOpacity] = React.useState(10);

  // Modals
  const {
    isOpen: isTemplateGalleryOpen,
    onOpen: onTemplateGalleryOpen,
    onOpenChange: onTemplateGalleryOpenChange,
  } = useDisclosure();
  const {
    isOpen: isExportModalOpen,
    onOpen: onExportModalOpen,
    onOpenChange: onExportModalOpenChange,
  } = useDisclosure();
  const {
    isOpen: isStylePanelOpen,
    onOpen: onStylePanelOpen,
    onOpenChange: onStylePanelOpenChange,
  } = useDisclosure();
  const {
    isOpen: isFloatingPanelOpen,
    onOpen: onFloatingPanelOpen,
    onOpenChange: onFloatingPanelOpenChange,
  } = useDisclosure();

  // Computed values
  const cardStyle = React.useMemo(() => {
    // Define a local version of the function that has access to all state
    const generateStyle = (card: CardData): CardStyle => {
      const hexToRgb = (hex: string) => {
        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result
          ? {
              r: Number.parseInt(result[1], 16),
              g: Number.parseInt(result[2], 16),
              b: Number.parseInt(result[3], 16),
            }
          : { r: 82, g: 48, b: 145 };
      };

      const bgFromRgb = hexToRgb(card.bgGradientFrom || "#523091");
      const bgToRgb = hexToRgb(card.bgGradientTo || "#1a0b33");
      const shadowRgb = hexToRgb(card.shadowColor || "#7c3aed");
      const shadow2Rgb = hexToRgb(card.shadow2Settings?.color || "#ffffff");
      // Now borderColor is in scope
      const borderRgb = hexToRgb(borderColor || "#ffffff");

      const shadow = `${card.shadowSettings?.inset ? "inset " : ""}${card.shadowSettings?.x || "0"}px ${
        card.shadowSettings?.y || "30"
      }px ${card.shadowSettings?.blur || "50"}px ${card.shadowSettings?.spread || "0"}px rgba(${
        shadowRgb.r
      }, ${shadowRgb.g}, ${shadowRgb.b}, ${card.shadowOpacity || "0.3"})`;

      const secondShadow = card.shadow2Settings
        ? `, ${card.shadow2Settings.inset ? "inset " : ""}${card.shadow2Settings.x}px ${card.shadow2Settings.y}px ${
            card.shadow2Settings.blur
          }px ${card.shadow2Settings.spread}px rgba(${shadow2Rgb.r}, ${shadow2Rgb.g}, ${shadow2Rgb.b}, ${
            card.shadow2Settings.opacity
          })`
        : "";

      const transform = `rotate(${card.rotation || 0}deg) scaleX(${card.scaleX || 1}) scaleY(${card.scaleY || 1})`;
      
      // Use background type from state
      const background = backgroundType === "solid"
        ? `rgba(${bgFromRgb.r}, ${bgFromRgb.g}, ${bgFromRgb.b}, ${card.bgOpacityFrom || "0.7"})`
        : `radial-gradient(86.88% 75.47% at 50.00% 24.53%, rgba(${bgFromRgb.r}, ${
            bgFromRgb.g
          }, ${bgFromRgb.b}, ${card.bgOpacityFrom || "0.7"}), rgba(${bgToRgb.r}, ${bgToRgb.g}, ${
            bgToRgb.b
          }, ${card.bgOpacityTo || "0.14"}))`;

      // Use border settings from state
      const border = borderWidth > 0 
        ? `${borderWidth}px ${borderStyle} rgba(${borderRgb.r}, ${borderRgb.g}, ${borderRgb.b}, ${borderOpacity / 100})`
        : "none";
      
      // Use glassmorphism settings from state
      const backdropFilter = glassmorphismEnabled ? `blur(${backdropBlur}px)` : "none";

      return {
        width: Number.parseInt(card.cardWidth || "320"),
        height: card.cardHeight === "auto" ? "auto" : Number.parseInt(card.cardHeight || "200"),
        background,
        borderRadius: Number.parseInt(card.cardBorderRadius?.topLeft || "16"),
        boxShadow: `${shadow}${secondShadow}`,
        padding: Number.parseInt(card.cardPadding || "24"),
        opacity: (card.cardOpacity || 100) / 100,
        color: "white",
        transform,
        border,
        backdropFilter,
      };
    };
    
    return generateStyle(activeCard);
  }, [
    activeCard, 
    backgroundType, 
    borderWidth, 
    borderStyle, 
    borderColor, 
    borderOpacity, 
    glassmorphismEnabled, 
    backdropBlur
  ]);

  const canUndo = historyIndex > 0;
  const canRedo = historyIndex < history.length - 1;

  const filteredTemplates = React.useMemo(() => {
    const filtered = templates.filter((template) => {
      const matchesSearch =
        template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        template.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
        template.tags.some((tag) => tag.toLowerCase().includes(searchTerm.toLowerCase()));

      const matchesCategory = selectedCategory === "All" || template.category === selectedCategory;
      const matchesTags = selectedTags.length === 0 || selectedTags.some((tag) => template.tags.includes(tag));
      const matchesPremium = !showPremiumOnly || template.isPremium;
      const matchesFree = !showFreeOnly || !template.isPremium;

      return matchesSearch && matchesCategory && matchesTags && matchesPremium && matchesFree;
    });

    filtered.sort((a, b) => {
      switch (sortBy) {
        case "popular":
          return b.downloads - a.downloads;
        case "newest":
          return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
        case "rating":
          return b.rating - a.rating;
        default:
          return 0;
      }
    });

    return filtered;
  }, [searchTerm, selectedCategory, selectedTags, sortBy, showPremiumOnly, showFreeOnly]);

  // Handlers
  const updateCard = React.useCallback(
    (updates: Partial<CardData>) => {
      const newCard = { ...activeCard, ...updates };
      setActiveCard(newCard);

      // Add to history
      const newHistory = history.slice(0, historyIndex + 1);
      newHistory.push(newCard);
      setHistory(newHistory);
      setHistoryIndex(newHistory.length - 1);
    },
    [activeCard, history, historyIndex]
  );

  const undo = React.useCallback(() => {
    if (canUndo) {
      setHistoryIndex(historyIndex - 1);
      setActiveCard(history[historyIndex - 1]);
    }
  }, [canUndo, historyIndex, history]);

  const redo = React.useCallback(() => {
    if (canRedo) {
      setHistoryIndex(historyIndex + 1);
      setActiveCard(history[historyIndex + 1]);
    }
  }, [canRedo, historyIndex, history]);

  const generateRandomCard = React.useCallback(() => {
    const titles = ["Creative Card", "Modern Design", "Elegant Style", "Dynamic Card", "Innovative UI"];
    const descriptions = [
      "Beautiful and responsive design",
      "Crafted with precision and care",
      "Designed for maximum impact",
      "Built for the future of web",
    ];

    const randomTitle = titles[Math.floor(Math.random() * titles.length)];
    const randomDescription = descriptions[Math.floor(Math.random() * descriptions.length)];

    updateCard({
      title: randomTitle,
      description: randomDescription,
      bgGradientFrom: `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0')}`,
      bgGradientTo: `#${Math.floor(Math.random() * 16777215).toString(16).padStart(6, '0')}`,
    });
  }, [updateCard]);

  const applyTemplate = React.useCallback(
    (template: Template) => {
      updateCard(template.data);
      onTemplateGalleryOpenChange(false);
    },
    [updateCard, onTemplateGalleryOpenChange]
  );

  const exportCard = React.useCallback(() => {
    const exportData = {
      card: activeCard,
      style: cardStyle,
      timestamp: new Date().toISOString(),
      version: "2.0.0",
    };

    const blob = new Blob([JSON.stringify(exportData, null, 2)], {
      type: "application/json",
    });

    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `card-editor-pro-${Date.now()}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }, [activeCard, cardStyle]);

  // Keyboard shortcuts
  React.useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.ctrlKey || e.metaKey) {
        switch (e.key) {
          case "z":
            e.preventDefault();
            if (e.shiftKey) {
              redo();
            } else {
              undo();
            }
            break;
          case "y":
            e.preventDefault();
            redo();
            break;
          case "s":
            e.preventDefault();
            exportCard();
            break;
          case "t":
            e.preventDefault();
            onTemplateGalleryOpen();
            break;
        }
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [undo, redo, exportCard, onTemplateGalleryOpen]);

  const handleOpenFloatingPanel = React.useCallback((mode: "style" | "gradient" | "shadow") => {
    setFloatingPanelMode(mode);
    onFloatingPanelOpen();
  }, [onFloatingPanelOpen]);

  const handleTagToggle = React.useCallback((tag: string) => {
    setSelectedTags((prev) => (prev.includes(tag) ? prev.filter((t) => t !== tag) : [...prev, tag]));
  }, []);

  const clearFilters = React.useCallback(() => {
    setSearchTerm("");
    setSelectedCategory("All");
    setSelectedTags([]);
    setShowPremiumOnly(false);
    setShowFreeOnly(false);
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 relative overflow-hidden">
      {/* Animated Background */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        {[...Array(50)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-1 h-1 bg-white rounded-full opacity-20"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
            }}
            animate={{
              y: [0, -100, 0],
              opacity: [0.2, 0.8, 0.2],
            }}
            transition={{
              duration: Math.random() * 3 + 2,
              repeat: Infinity,
              ease: "easeInOut",
            }}
          />
        ))}
      </div>

      {/* Header */}
      <motion.header
        className="fixed top-0 left-0 right-0 z-30 bg-black/20 backdrop-blur-xl border-b border-white/10"
        initial={{ y: -100 }}
        animate={{ y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <div className="flex items-center justify-between px-6 py-4">
          <div className="flex items-center space-x-4">
            <motion.div
              className="flex items-center space-x-3"
              whileHover={{ scale: 1.05 }}
              transition={{ duration: 0.2 }}
            >
              <div className="w-10 h-10 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl flex items-center justify-center">
                <Icon icon="lucide:palette" className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-white">Card Editor Pro</h1>
                <p className="text-xs text-white/60">Professional Card Designer</p>
              </div>
            </motion.div>
          </div>

          <div className="flex items-center space-x-3">
            <Tooltip content="Undo (Ctrl+Z)" placement="bottom">
              <Button
                isIconOnly
                variant="flat"
                color={canUndo ? "default" : "default"}
                isDisabled={!canUndo}
                onPress={undo}
                className={`${canUndo ? "opacity-100" : "opacity-30"}`}
              >
                <Icon icon="lucide:undo" className="w-4 h-4" />
              </Button>
            </Tooltip>

            <Tooltip content="Redo (Ctrl+Y)" placement="bottom">
              <Button
                isIconOnly
                variant="flat"
                color={canRedo ? "default" : "default"}
                isDisabled={!canRedo}
                onPress={redo}
                className={`${canRedo ? "opacity-100" : "opacity-30"}`}
              >
                <Icon icon="lucide:redo" className="w-4 h-4" />
              </Button>
            </Tooltip>

            <div className="w-px h-6 bg-white/20" />

            <Button
              variant="flat"
              color="primary"
              startContent={<Icon icon="lucide:grid" className="w-4 h-4" />}
              onPress={onTemplateGalleryOpen}
            >
              Templates
            </Button>

            <Button
              variant="flat"
              color="secondary"
              startContent={<Icon icon="lucide:shuffle" className="w-4 h-4" />}
              onPress={generateRandomCard}
            >
              Random
            </Button>

            <Button
              variant="flat"
              color="success"
              startContent={<Icon icon="lucide:download" className="w-4 h-4" />}
              onPress={onExportModalOpen}
            >
              Export
            </Button>
          </div>
        </div>
      </motion.header>

      {/* Main Content */}
      <div className="pt-20 pb-10 px-6 max-w-7xl mx-auto">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Left Sidebar */}
          <AnimatePresence>
            {sidebarOpen && (
              <motion.div
                className="lg:col-span-1"
                initial={{ opacity: 0, x: -50 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -50 }}
                transition={{ duration: 0.3 }}
              >
                <Card className="bg-black/20 backdrop-blur-xl border border-white/10">
                  <div className="p-6">
                    {/* Tab Navigation */}
                    <div className="flex space-x-1 mb-6 bg-white/5 rounded-lg p-1">
                      {[
                        { key: "basic", label: "Basic", icon: "lucide:file-text" },
                        { key: "style", label: "Style", icon: "lucide:palette" },
                        { key: "effects", label: "Effects", icon: "lucide:sparkles" },
                        { key: "code", label: "Code", icon: "lucide:code" },
                      ].map((tab) => (
                        <motion.button
                          key={tab.key}
                          className={`flex-1 flex items-center justify-center space-x-2 py-2 px-3 rounded-md text-sm font-medium transition-all ${
                            activeTab === tab.key
                              ? "bg-white/10 text-white"
                              : "text-white/60 hover:text-white hover:bg-white/5"
                          }`}
                          onClick={() => setActiveTab(tab.key as any)}
                          whileHover={{ scale: 1.02 }}
                          whileTap={{ scale: 0.98 }}
                        >
                          <Icon icon={tab.icon} className="w-4 h-4" />
                          <span>{tab.label}</span>
                        </motion.button>
                      ))}
                    </div>

                    {/* Tab Content */}
                    <div className="space-y-6">
                      {activeTab === "basic" && (
                        <motion.div
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          className="space-y-4"
                        >
                          <div>
                            <label className="block text-sm font-medium text-white/80 mb-2">Title</label>
                            <Input
                              type="text"
                              value={activeCard.title}
                              onValueChange={(value) => updateCard({ title: value })}
                              placeholder="Enter card title"
                              variant="faded"
                              className="bg-white/10 border-white/20 text-white"
                            />
                          </div>

                          <div>
                            <label className="block text-sm font-medium text-white/80 mb-2">Description</label>
                            <textarea
                              value={activeCard.description}
                              onChange={(e) => updateCard({ description: e.target.value })}
                              className="w-full px-3 py-2 bg-white/10 border border-white/20 rounded-lg text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-purple-500 resize-none"
                              rows={3}
                              placeholder="Enter card description"
                            />
                          </div>

                          <div className="grid grid-cols-2 gap-4">
                            <div>
                              <label className="block text-sm font-medium text-white/80 mb-2">Width</label>
                              <Input
                                type="number"
                                value={activeCard.cardWidth}
                                onValueChange={(value) => updateCard({ cardWidth: value })}
                                min={200}
                                max={800}
                                variant="faded"
                                className="bg-white/10 border-white/20 text-white"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-white/80 mb-2">Height</label>
                              <Input
                                type="number"
                                value={activeCard.cardHeight}
                                onValueChange={(value) => updateCard({ cardHeight: value })}
                                min={100}
                                max={600}
                                variant="faded"
                                className="bg-white/10 border-white/20 text-white"
                              />
                            </div>
                          </div>
                        </motion.div>
                      )}

                      {activeTab === "style" && (
                        <motion.div
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          className="space-y-6"
                        >
                          {/* Background Type Selection */}
                          <div className="bg-content2/20 border border-white/10 rounded-xl p-4">
                            <div className="flex items-center gap-2 mb-3">
                              <Icon icon="lucide:palette" className="w-4 h-4 text-purple-400" />
                              <h3 className="text-sm font-semibold text-white/90">Background Type</h3>
                            </div>
                            <div className="grid grid-cols-2 gap-3">
                              {[
                                { key: "solid", label: "Solid", icon: "lucide:circle" },
                                { key: "gradient", label: "Gradient", icon: "lucide:layers" },
                              ].map((type) => (
                                <motion.button
                                  key={type.key}
                                  className={`p-3 rounded-xl border transition-all duration-200 ${
                                    backgroundType === type.key
                                      ? "bg-purple-500/20 border-purple-400 text-white"
                                      : "bg-white/5 border-white/10 text-white/70 hover:bg-white/10"
                                  }`}
                                  onClick={() => setBackgroundType(type.key as "solid" | "gradient")}
                                  whileHover={{ scale: 1.02 }}
                                  whileTap={{ scale: 0.98 }}
                                >
                                  <Icon icon={type.icon} className="w-5 h-5 mx-auto mb-2" />
                                  <div className="text-xs font-medium">{type.label}</div>
                                </motion.button>
                              ))}
                            </div>
                          </div>

                          {/* Background Colors */}
                          <div>
                            <label className="block text-sm font-medium text-white/80 mb-3">
                              Background Colors
                            </label>
                            <div className="grid grid-cols-2 gap-4">
                              <div>
                                <label className="block text-xs text-white/60 mb-2">Primary Color</label>
                                <div className="flex items-center space-x-2">
                                  <div
                                    className="w-10 h-10 rounded-lg border border-white/20 cursor-pointer"
                                    style={{ backgroundColor: activeCard.bgGradientFrom }}
                                  >
                                    <input
                                      type="color"
                                      value={activeCard.bgGradientFrom}
                                      onChange={(e) => updateCard({ bgGradientFrom: e.target.value })}
                                      className="w-full h-full opacity-0 cursor-pointer"
                                    />
                                  </div>
                                  <Input
                                    type="text"
                                    value={activeCard.bgGradientFrom}
                                    onValueChange={(value) => updateCard({ bgGradientFrom: value })}
                                    className="flex-1 bg-white/10 border-white/20 text-white text-sm"
                                    size="sm"
                                    variant="faded"
                                  />
                                </div>
                                <div className="mt-2">
                                  <label className="block text-xs text-white/60 mb-1">Opacity</label>
                                  <input
                                    type="range"
                                    min="0"
                                    max="100"
                                    value={parseFloat(activeCard.bgOpacityFrom || "70") * 100}
                                    onChange={(e) => updateCard({ bgOpacityFrom: (Number(e.target.value) / 100).toString() })}
                                    className="w-full accent-purple-500"
                                  />
                                  <div className="flex justify-between text-xs text-white/60 mt-1">
                                    <span>0%</span>
                                    <span>{Math.round(parseFloat(activeCard.bgOpacityFrom || "0.7") * 100)}%</span>
                                    <span>100%</span>
                                  </div>
                                </div>
                              </div>
                              
                              {backgroundType === "gradient" && (
                                <div>
                                  <label className="block text-xs text-white/60 mb-2">Secondary Color</label>
                                  <div className="flex items-center space-x-2">
                                    <div
                                      className="w-10 h-10 rounded-lg border border-white/20 cursor-pointer"
                                      style={{ backgroundColor: activeCard.bgGradientTo }}
                                    >
                                      <input
                                        type="color"
                                        value={activeCard.bgGradientTo}
                                        onChange={(e) => updateCard({ bgGradientTo: e.target.value })}
                                        className="w-full h-full opacity-0 cursor-pointer"
                                      />
                                    </div>
                                    <Input
                                      type="text"
                                      value={activeCard.bgGradientTo}
                                      onValueChange={(value) => updateCard({ bgGradientTo: value })}
                                      className="flex-1 bg-white/10 border-white/20 text-white text-sm"
                                      size="sm"
                                      variant="faded"
                                    />
                                  </div>
                                  <div className="mt-2">
                                    <label className="block text-xs text-white/60 mb-1">Opacity</label>
                                    <input
                                      type="range"
                                      min="0"
                                      max="100"
                                      value={parseFloat(activeCard.bgOpacityTo || "14") * 100}
                                      onChange={(e) => updateCard({ bgOpacityTo: (Number(e.target.value) / 100).toString() })}
                                      className="w-full accent-purple-500"
                                    />
                                    <div className="flex justify-between text-xs text-white/60 mt-1">
                                      <span>0%</span>
                                      <span>{Math.round(parseFloat(activeCard.bgOpacityTo || "0.14") * 100)}%</span>
                                      <span>100%</span>
                                    </div>
                                  </div>
                                </div>
                              )}
                            </div>
                          </div>

                          {/* Gradient Direction - only show if gradient is selected */}
                          {backgroundType === "gradient" && (
                            <div>
                              <label className="block text-sm font-medium text-white/80 mb-3">Gradient Direction</label>
                              <div className="flex items-center justify-center">
                                <div className="relative w-24 h-24">
                                  <div className="absolute inset-0 rounded-full border-2 border-white/20" />
                                  <motion.div
                                    className="absolute w-2 h-8 bg-purple-500 rounded-full origin-bottom cursor-pointer"
                                    style={{
                                      left: "50%",
                                      bottom: "50%",
                                      marginLeft: "-1px",
                                      transform: `rotate(${gradientAngle}deg)`,
                                    }}
                                    drag
                                    dragConstraints={{ left: 0, right: 0, top: 0, bottom: 0 }}
                                    onDrag={(event, info) => {
                                      const rect = (event.target as HTMLElement).parentElement?.getBoundingClientRect();
                                      if (rect) {
                                        const centerX = rect.width / 2;
                                        const centerY = rect.height / 2;
                                        const x = info.point.x - rect.left - centerX;
                                        const y = info.point.y - rect.top - centerY;
                                        const newAngle = (Math.atan2(y, x) * 180) / Math.PI + 90;
                                        setGradientAngle(Math.round(newAngle));
                                      }
                                    }}
                                  />
                                  <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
                                    <Icon icon="lucide:rotate-cw" className="w-4 h-4 text-white/40" />
                                  </div>
                                </div>
                              </div>
                              <div className="text-center text-xs text-white/60 mt-2">{gradientAngle}°</div>
                            </div>
                          )}

                          {/* Glassmorphism Effect */}
                          <div className="bg-content2/20 border border-white/10 rounded-xl p-4">
                            <div className="flex items-center justify-between mb-3">
                              <div className="flex items-center gap-2">
                                <Icon icon="lucide:glasses" className="w-4 h-4 text-purple-400" />
                                <h3 className="text-sm font-semibold text-white/90">Glassmorphism Effect</h3>
                              </div>
                              <Switch
                                isSelected={glassmorphismEnabled}
                                onValueChange={setGlassmorphismEnabled}
                                size="sm"
                                color="secondary"
                              />
                            </div>
                            
                            {glassmorphismEnabled && (
                              <div className="mt-3">
                                <label className="block text-xs text-white/60 mb-2">Backdrop Blur</label>
                                <input
                                  type="range"
                                  min="0"
                                  max="30"
                                  value={backdropBlur}
                                  onChange={(e) => setBackdropBlur(Number(e.target.value))}
                                  className="w-full accent-purple-500"
                                />
                                <div className="flex justify-between text-xs text-white/60 mt-1">
                                  <span>0px</span>
                                  <span>{backdropBlur}px</span>
                                  <span>30px</span>
                                </div>
                              </div>
                            )}
                          </div>

                          {/* Border Settings */}
                          <div className="bg-content2/20 border border-white/10 rounded-xl p-4">
                            <div className="flex items-center gap-2 mb-3">
                              <Icon icon="lucide:square" className="w-4 h-4 text-purple-400" />
                              <h3 className="text-sm font-semibold text-white/90">Border Settings</h3>
                            </div>
                            
                            <div className="space-y-4">
                              <div>
                                <label className="block text-xs text-white/60 mb-2">Border Width</label>
                                <input
                                  type="range"
                                  min="0"
                                  max="10"
                                  value={borderWidth}
                                  onChange={(e) => setBorderWidth(Number(e.target.value))}
                                  className="w-full accent-purple-500"
                                />
                                <div className="flex justify-between text-xs text-white/60 mt-1">
                                  <span>0px</span>
                                  <span>{borderWidth}px</span>
                                  <span>10px</span>
                                </div>
                              </div>
                              
                              {borderWidth > 0 && (
                                <>
                                  <div>
                                    <label className="block text-xs text-white/60 mb-2">Border Style</label>
                                    <div className="grid grid-cols-3 gap-2">
                                      {["solid", "dashed", "dotted"].map((style) => (
                                        <Button
                                          key={style}
                                          size="sm"
                                          variant={borderStyle === style ? "solid" : "flat"}
                                          color={borderStyle === style ? "secondary" : "default"}
                                          onPress={() => setBorderStyle(style)}
                                          className="capitalize"
                                        >
                                          {style}
                                        </Button>
                                      ))}
                                    </div>
                                  </div>
                                  
                                  <div>
                                    <label className="block text-xs text-white/60 mb-2">Border Color</label>
                                    <div className="flex items-center space-x-2">
                                      <div
                                        className="w-10 h-10 rounded-lg border border-white/20 cursor-pointer"
                                        style={{ backgroundColor: borderColor }}
                                      >
                                        <input
                                          type="color"
                                          value={borderColor}
                                          onChange={(e) => setBorderColor(e.target.value)}
                                          className="w-full h-full opacity-0 cursor-pointer"
                                        />
                                      </div>
                                      <Input
                                        type="text"
                                        value={borderColor}
                                        onValueChange={setBorderColor}
                                        className="flex-1 bg-white/10 border-white/20 text-white text-sm"
                                        size="sm"
                                        variant="faded"
                                      />
                                    </div>
                                    <div className="mt-2">
                                      <label className="block text-xs text-white/60 mb-1">Opacity</label>
                                      <input
                                        type="range"
                                        min="0"
                                        max="100"
                                        value={borderOpacity}
                                        onChange={(e) => setBorderOpacity(Number(e.target.value))}
                                        className="w-full accent-purple-500"
                                      />
                                      <div className="flex justify-between text-xs text-white/60 mt-1">
                                        <span>0%</span>
                                        <span>{borderOpacity}%</span>
                                        <span>100%</span>
                                      </div>
                                    </div>
                                  </div>
                                </>
                              )}
                            </div>
                          </div>

                          {/* Border Radius */}
                          <div>
                            <div className="flex items-center justify-between mb-3">
                              <label className="block text-sm font-medium text-white/80">Border Radius</label>
                              <div className="flex items-center gap-2">
                                <span className="text-xs text-white/60">Individual Corners</span>
                                <Switch
                                  size="sm"
                                  isSelected={!linkedBorderRadius}
                                  onValueChange={(value) => setLinkedBorderRadius(!value)}
                                  color="secondary"
                                />
                              </div>
                            </div>
                            
                            {linkedBorderRadius ? (
                              <div>
                                <input
                                  type="range"
                                  min="0"
                                  max="50"
                                  value={activeCard.cardBorderRadius.topLeft}
                                  onChange={(e) =>
                                    updateCard({
                                      cardBorderRadius: {
                                        ...activeCard.cardBorderRadius,
                                        topLeft: e.target.value,
                                        topRight: e.target.value,
                                        bottomLeft: e.target.value,
                                        bottomRight: e.target.value,
                                      },
                                    })
                                  }
                                  className="w-full accent-purple-500"
                                />
                                <div className="flex justify-between text-xs text-white/60 mt-1">
                                  <span>0px</span>
                                  <span>{activeCard.cardBorderRadius.topLeft}px</span>
                                  <span>50px</span>
                                </div>
                              </div>
                            ) : (
                              <div className="grid grid-cols-2 gap-4">
                                <div>
                                  <label className="block text-xs text-white/60 mb-1">Top Left</label>
                                  <input
                                    type="range"
                                    min="0"
                                    max="50"
                                    value={activeCard.cardBorderRadius.topLeft}
                                    onChange={(e) =>
                                      updateCard({
                                        cardBorderRadius: {
                                          ...activeCard.cardBorderRadius,
                                          topLeft: e.target.value,
                                        },
                                      })
                                    }
                                    className="w-full accent-purple-500"
                                  />
                                  <div className="text-xs text-white/60 mt-1">{activeCard.cardBorderRadius.topLeft}px</div>
                                </div>
                                <div>
                                  <label className="block text-xs text-white/60 mb-1">Top Right</label>
                                  <input
                                    type="range"
                                    min="0"
                                    max="50"
                                    value={activeCard.cardBorderRadius.topRight}
                                    onChange={(e) =>
                                      updateCard({
                                        cardBorderRadius: {
                                          ...activeCard.cardBorderRadius,
                                          topRight: e.target.value,
                                        },
                                      })
                                    }
                                    className="w-full accent-purple-500"
                                  />
                                  <div className="text-xs text-white/60 mt-1">{activeCard.cardBorderRadius.topRight}px</div>
                                </div>
                                <div>
                                  <label className="block text-xs text-white/60 mb-1">Bottom Left</label>
                                  <input
                                    type="range"
                                    min="0"
                                    max="50"
                                    value={activeCard.cardBorderRadius.bottomLeft}
                                    onChange={(e) =>
                                      updateCard({
                                        cardBorderRadius: {
                                          ...activeCard.cardBorderRadius,
                                          bottomLeft: e.target.value,
                                        },
                                      })
                                    }
                                    className="w-full accent-purple-500"
                                  />
                                  <div className="text-xs text-white/60 mt-1">{activeCard.cardBorderRadius.bottomLeft}px</div>
                                </div>
                                <div>
                                  <label className="block text-xs text-white/60 mb-1">Bottom Right</label>
                                  <input
                                    type="range"
                                    min="0"
                                    max="50"
                                    value={activeCard.cardBorderRadius.bottomRight}
                                    onChange={(e) =>
                                      updateCard({
                                        cardBorderRadius: {
                                          ...activeCard.cardBorderRadius,
                                          bottomRight: e.target.value,
                                        },
                                      })
                                    }
                                    className="w-full accent-purple-500"
                                  />
                                  <div className="text-xs text-white/60 mt-1">{activeCard.cardBorderRadius.bottomRight}px</div>
                                </div>
                              </div>
                            )}
                          </div>

                          {/* Global Opacity */}
                          <div>
                            <label className="block text-sm font-medium text-white/80 mb-3">Global Opacity</label>
                            <input
                              type="range"
                              min="0"
                              max="100"
                              value={activeCard.cardOpacity}
                              onChange={(e) => updateCard({ cardOpacity: Number(e.target.value) })}
                              className="w-full accent-purple-500"
                            />
                            <div className="flex justify-between text-xs text-white/60 mt-1">
                              <span>0%</span>
                              <span>{activeCard.cardOpacity}%</span>
                              <span>100%</span>
                            </div>
                          </div>
                        </motion.div>
                      )}

                      {activeTab === "effects" && (
                        <motion.div
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          className="space-y-6"
                        >
                          <div className="flex items-center justify-between p-4 bg-white/5 rounded-lg">
                            <div>
                              <div className="text-sm font-medium text-white">Hover Effects</div>
                              <div className="text-xs text-white/60">Enable interactive hover animations</div>
                            </div>
                            <motion.button
                              className={`relative w-12 h-6 rounded-full transition-colors ${
                                activeCard.enableHoverEffects ? "bg-purple-500" : "bg-white/20"
                              }`}
                              onClick={() => updateCard({ enableHoverEffects: !activeCard.enableHoverEffects })}
                              whileTap={{ scale: 0.95 }}
                            >
                              <motion.div
                                className="absolute w-4 h-4 bg-white rounded-full top-1"
                                animate={{ x: activeCard.enableHoverEffects ? 28 : 4 }}
                                transition={{ type: "spring", stiffness: 500, damping: 30 }}
                              />
                            </motion.button>
                          </div>

                          <div className="flex items-center justify-between p-4 bg-white/5 rounded-lg">
                            <div>
                              <div className="text-sm font-medium text-white">Animations</div>
                              <div className="text-xs text-white/60">Enable floating animations</div>
                            </div>
                            <motion.button
                              className={`relative w-12 h-6 rounded-full transition-colors ${
                                activeCard.enableAnimations ? "bg-purple-500" : "bg-white/20"
                              }`}
                              onClick={() => updateCard({ enableAnimations: !activeCard.enableAnimations })}
                              whileTap={{ scale: 0.95 }}
                            >
                              <motion.div
                                className="absolute w-4 h-4 bg-white rounded-full top-1"
                                animate={{ x: activeCard.enableAnimations ? 28 : 4 }}
                                transition={{ type: "spring", stiffness: 500, damping: 30 }}
                              />
                            </motion.button>
                          </div>

                          <div>
                            <label className="block text-sm font-medium text-white/80 mb-3">Shadow Color</label>
                            <div className="flex items-center space-x-3">
                              <div
                                className="w-12 h-12 rounded-lg border border-white/20 cursor-pointer"
                                style={{ backgroundColor: activeCard.shadowColor }}
                              >
                                <input
                                  type="color"
                                  value={activeCard.shadowColor}
                                  onChange={(e) => updateCard({ shadowColor: e.target.value })}
                                  className="w-full h-full opacity-0 cursor-pointer"
                                />
                              </div>
                              <div className="flex-1">
                                <input
                                  type="range"
                                  min="0"
                                  max="1"
                                  step="0.1"
                                  value={activeCard.shadowOpacity}
                                  onChange={(e) => updateCard({ shadowOpacity: e.target.value })}
                                  className="w-full accent-purple-500"
                                />
                                <div className="text-xs text-white/60 mt-1">
                                  Opacity: {activeCard.shadowOpacity}
                                </div>
                              </div>
                            </div>
                          </div>
                        </motion.div>
                      )}

                      {activeTab === "code" && (
                        <motion.div
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          className="space-y-4"
                        >
                          <div>
                            <label className="block text-sm font-medium text-white/80 mb-2">Generated CSS</label>
                            <div className="bg-black/40 border border-white/20 rounded-lg p-4 text-xs text-white/80 font-mono max-h-60 overflow-y-auto">
                              <pre>{`/* Card Styles */
.card {
  width: ${cardStyle.width}px;
  height: ${cardStyle.height === "auto" ? "auto" : `${cardStyle.height}px`};
  background: ${cardStyle.background};
  border-radius: ${cardStyle.borderRadius}px;
  box-shadow: ${cardStyle.boxShadow};
  padding: ${cardStyle.padding}px;
  opacity: ${cardStyle.opacity};
  color: ${cardStyle.color};
  transition: all 0.3s ease;
}

.card:hover {
  transform: translateY(-8px) scale(1.02);
}`}</pre>
                            </div>
                          </div>

                          <Button
                            color="primary"
                            variant="flat"
                            fullWidth
                            startContent={<Icon icon="lucide:copy" className="w-4 h-4" />}
                            onPress={() => {
                              navigator.clipboard.writeText(`/* Card Styles */
.card {
  width: ${cardStyle.width}px;
  height: ${cardStyle.height === "auto" ? "auto" : `${cardStyle.height}px`};
  background: ${cardStyle.background};
  border-radius: ${cardStyle.borderRadius}px;
  box-shadow: ${cardStyle.boxShadow};
  padding: ${cardStyle.padding}px;
  opacity: ${cardStyle.opacity};
  color: ${cardStyle.color};
  transition: all 0.3s ease;
}

.card:hover {
  transform: translateY(-8px) scale(1.02);
}`);
                            }}
                          >
                            Copy CSS
                          </Button>
                        </motion.div>
                      )}
                    </div>
                  </div>
                </Card>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Card Preview */}
          <div className={`${sidebarOpen ? 'lg:col-span-2' : 'lg:col-span-3'}`}>
            <div className="flex items-center justify-center min-h-[500px] p-8">
              <motion.div
                className="relative"
                style={{ perspective: "1000px" }}
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ duration: 0.5, ease: "easeOut" }}
              >
                <motion.div
                  className={`transition-all duration-500 ease-out flex flex-col items-center justify-center relative ${
                    activeCard.enableHoverEffects ? "hover:scale-105 hover:-translate-y-2" : ""
                  }`}
                  style={{
                    width: `${cardStyle.width}px`,
                    height: cardStyle.height === "auto" ? "auto" : `${cardStyle.height}px`,
                    background: cardStyle.background,
                    borderRadius: linkedBorderRadius 
                      ? `${cardStyle.borderRadius}px` 
                      : `${activeCard.cardBorderRadius.topLeft}px ${activeCard.cardBorderRadius.topRight}px ${activeCard.cardBorderRadius.bottomRight}px ${activeCard.cardBorderRadius.bottomLeft}px`,
                    boxShadow: cardStyle.boxShadow,
                    padding: `${cardStyle.padding}px`,
                    opacity: cardStyle.opacity,
                    color: cardStyle.color,
                    transform: cardStyle.transform,
                    border: cardStyle.border,
                    backdropFilter: cardStyle.backdropFilter,
                  }}
                  whileHover={
                    activeCard.enableHoverEffects
                      ? {
                          scale: 1.05,
                          y: -8,
                          boxShadow:
                            "0px 40px 80px 0px rgba(124, 58, 237, 0.4), inset 0px 1px 0px 0px rgba(255, 255, 255, 0.2)",
                        }
                      : {}
                  }
                >
                  <div className="text-center">
                    <motion.div
                      className="font-semibold text-lg mb-2"
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: 0.2, duration: 0.5 }}
                    >
                      {activeCard.title}
                    </motion.div>
                    <motion.div
                      className="text-sm opacity-80"
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: 0.4, duration: 0.5 }}
                    >
                      {activeCard.description}
                    </motion.div>

                    {/* Interactive Elements */}
                    <motion.div
                      className="flex items-center justify-center space-x-4 mt-4"
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: 0.6, duration: 0.5 }}
                    >
                      <motion.button
                        className="p-2 rounded-full bg-white/10 hover:bg-white/20 transition-colors"
                        whileHover={{ scale: 1.1 }}
                        whileTap={{ scale: 0.95 }}
                      >
                        <Icon icon="lucide:heart" className="w-4 h-4" />
                      </motion.button>
                      <motion.button
                        className="p-2 rounded-full bg-white/10 hover:bg-white/20 transition-colors"
                        whileHover={{ scale: 1.1 }}
                        whileTap={{ scale: 0.95 }}
                      >
                        <Icon icon="lucide:message-circle" className="w-4 h-4" />
                      </motion.button>
                      <motion.button
                        className="p-2 rounded-full bg-white/10 hover:bg-white/20 transition-colors"
                        whileHover={{ scale: 1.1 }}
                        whileTap={{ scale: 0.95 }}
                      >
                        <Icon icon="lucide:share-2" className="w-4 h-4" />
                      </motion.button>
                    </motion.div>

                    {/* Rating Display */}
                    <motion.div
                      className="flex items-center justify-center space-x-1 mt-3"
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: 0.8, duration: 0.5 }}
                    >
                      {[...Array(5)].map((_, i) => (
                        <Icon key={i} icon="lucide:star" className="w-3 h-3 text-yellow-400 fill-current" />
                      ))}
                      <span className="text-xs ml-2 opacity-70">4.9</span>
                    </motion.div>
                  </div>

                  {/* Floating Elements */}
                  {activeCard.enableAnimations && (
                    <>
                      <motion.div
                        className="absolute -top-2 -right-2 w-4 h-4 bg-gradient-to-r from-pink-500 to-purple-500 rounded-full"
                        animate={{
                          scale: [1, 1.2, 1],
                          opacity: [0.7, 1, 0.7],
                        }}
                        transition={{
                          duration: 2,
                          repeat: Infinity,
                          ease: "easeInOut",
                        }}
                      />
                      <motion.div
                        className="absolute -bottom-1 -left-1 w-3 h-3 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full"
                        animate={{
                          scale: [1, 1.3, 1],
                          opacity: [0.5, 0.8, 0.5],
                        }}
                        transition={{
                          duration: 3,
                          repeat: Infinity,
                          ease: "easeInOut",
                          delay: 1,
                        }}
                      />
                    </>
                  )}
                </motion.div>

                {/* Background Glow Effect */}
                <motion.div
                  className="absolute inset-0 -z-10 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-3xl blur-xl"
                  animate={{
                    scale: [1, 1.05, 1],
                    opacity: [0.3, 0.5, 0.3],
                  }}
                  transition={{
                    duration: 4,
                    repeat: Infinity,
                    ease: "easeInOut",
                  }}
                />
              </motion.div>
            </div>
          </div>
        </div>
      </div>

      {/* Sidebar Toggle Button */}
      <motion.button
        className="fixed top-24 left-4 z-30 p-3 bg-black/20 backdrop-blur-xl border border-white/10 rounded-xl text-white hover:bg-black/30 transition-all duration-200"
        onClick={() => setSidebarOpen(!sidebarOpen)}
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        initial={{ opacity: 0, x: -50 }}
        animate={{ opacity: 1, x: 0 }}
        transition={{ delay: 0.5 }}
      >
        <Icon icon="lucide:settings" className="w-5 h-5" />
      </motion.button>

      {/* Floating Action Buttons */}
      <div className="fixed bottom-8 right-8 z-40">
        <div className="flex flex-col space-y-4">
          {[
            {
              icon: "lucide:palette",
              label: "Style Controls",
              mode: "style" as const,
              gradient: "from-blue-500 to-purple-600",
            },
            {
              icon: "lucide:layers",
              label: "Gradient Builder",
              mode: "gradient" as const,
              gradient: "from-pink-500 to-orange-500",
            },
            {
              icon: "lucide:box",
              label: "3D Shadow",
              mode: "shadow" as const,
              gradient: "from-green-500 to-teal-600",
            },
          ].map((button, index) => (
            <Tooltip key={button.mode} content={button.label} placement="left">
              <motion.button
                className={`p-4 rounded-2xl bg-gradient-to-r ${button.gradient} shadow-lg backdrop-blur-sm border border-white/10 group relative overflow-hidden`}
                onClick={() => handleOpenFloatingPanel(button.mode)}
                initial={{ opacity: 0, x: 100 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: index * 0.1, duration: 0.3 }}
                whileHover={{ scale: 1.05, y: -2 }}
                whileTap={{ scale: 0.95 }}
              >
                <Icon icon={button.icon} className="w-6 h-6 text-white relative z-10" />
                <div className="absolute inset-0 bg-white/20 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-200" />
              </motion.button>
            </Tooltip>
          ))}
        </div>
      </div>

      {/* Template Gallery Modal */}
      <Modal 
        isOpen={isTemplateGalleryOpen} 
        onOpenChange={onTemplateGalleryOpenChange}
        size="5xl"
        backdrop="blur"
        scrollBehavior="inside"
      >
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader className="flex flex-col gap-1">
                <h2 className="text-2xl font-bold">Templates Gallery</h2>
                <p className="text-default-500 text-sm">Choose from {filteredTemplates.length} professional templates</p>
              </ModalHeader>
              <ModalBody>
                <div className="space-y-4">
                  {/* Search and Filters */}
                  <div className="flex flex-col md:flex-row gap-4">
                    <div className="relative flex-1">
                      <Input
                        type="text"
                        placeholder="Search templates..."
                        value={searchTerm}
                        onValueChange={setSearchTerm}
                        startContent={<Icon icon="lucide:search" className="text-default-400" />}
                        variant="bordered"
                      />
                    </div>

                    <div className="flex items-center gap-4">
                      <select
                        value={selectedCategory}
                        onChange={(e) => setSelectedCategory(e.target.value)}
                        className="px-3 py-2 bg-content1 border border-default-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                      >
                        {templateCategories.map((category) => (
                          <option key={category} value={category}>
                            {category}
                          </option>
                        ))}
                      </select>

                      <select
                        value={sortBy}
                        onChange={(e) => setSortBy(e.target.value as any)}
                        className="px-3 py-2 bg-content1 border border-default-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                      >
                        <option value="popular">Most Popular</option>
                        <option value="newest">Newest</option>
                        <option value="rating">Highest Rated</option>
                      </select>

                      <div className="flex items-center gap-2">
                        <Button
                          isIconOnly
                          variant={viewMode === "grid" ? "solid" : "flat"}
                          color={viewMode === "grid" ? "primary" : "default"}
                          onPress={() => setViewMode("grid")}
                          size="sm"
                        >
                          <Icon icon="lucide:grid" className="w-4 h-4" />
                        </Button>
                        <Button
                          isIconOnly
                          variant={viewMode === "list" ? "solid" : "flat"}
                          color={viewMode === "list" ? "primary" : "default"}
                          onPress={() => setViewMode("list")}
                          size="sm"
                        >
                          <Icon icon="lucide:list" className="w-4 h-4" />
                        </Button>
                      </div>
                    </div>
                  </div>

                  {/* Advanced Filters */}
                  <div className="flex flex-wrap gap-2 items-center">
                    <span className="text-sm text-default-500">Tags:</span>
                    {["professional", "clean", "minimal", "colorful", "creative", "modern"].map((tag) => (
                      <Button
                        key={tag}
                        size="sm"
                        variant={selectedTags.includes(tag) ? "solid" : "flat"}
                        color={selectedTags.includes(tag) ? "primary" : "default"}
                        onPress={() => handleTagToggle(tag)}
                        className="capitalize"
                      >
                        {tag}
                      </Button>
                    ))}
                    
                    <div className="ml-auto flex items-center gap-4">
                      <div className="flex items-center gap-2">
                        <Switch
                          size="sm"
                          isSelected={showPremiumOnly}
                          onValueChange={setShowPremiumOnly}
                          color="warning"
                        />
                        <span className="text-sm">Premium Only</span>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        <Switch
                          size="sm"
                          isSelected={showFreeOnly}
                          onValueChange={setShowFreeOnly}
                          color="success"
                        />
                        <span className="text-sm">Free Only</span>
                      </div>
                      
                      <Button
                        size="sm"
                        variant="light"
                        onPress={clearFilters}
                        startContent={<Icon icon="lucide:x" className="w-3 h-3" />}
                      >
                        Clear Filters
                      </Button>
                    </div>
                  </div>

                  {/* Templates Grid */}
                  {filteredTemplates.length === 0 ? (
                    <div className="flex flex-col items-center justify-center h-64 text-center">
                      <div className="text-default-500 text-lg mb-2">No templates found</div>
                      <div className="text-default-400 text-sm mb-4">
                        Try adjusting your search or filter criteria
                      </div>
                      <Button
                        color="primary"
                        onPress={() => {
                          setSearchTerm("");
                          setSelectedCategory("All");
                        }}
                      >
                        Clear Filters
                      </Button>
                    </div>
                  ) : (
                    <div
                      className={
                        viewMode === "grid"
                          ? "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
                          : "space-y-4"
                      }
                    >
                      <AnimatePresence>
                        {filteredTemplates.map((template, index) => (
                          <motion.div
                            key={template.id}
                            className={`bg-content1 border border-default-200 rounded-xl overflow-hidden hover:bg-content2 transition-all duration-200 cursor-pointer group ${
                              viewMode === "list" ? "flex items-center gap-4 p-4" : ""
                            }`}
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            exit={{ opacity: 0, y: -20 }}
                            transition={{ delay: index * 0.05 }}
                            onClick={() => applyTemplate(template)}
                            whileHover={{ scale: 1.02 }}
                            whileTap={{ scale: 0.98 }}
                          >
                            {viewMode === "grid" ? (
                              <>
                                <div className="aspect-video bg-gradient-to-br from-purple-500/20 to-pink-500/20 rounded-lg mb-4 flex items-center justify-center relative overflow-hidden">
                                  <img 
                                    src={`https://img.heroui.chat/image/${template.preview}?w=400&h=200&u=${template.id}`}
                                    alt={template.name}
                                    className="w-full h-full object-cover"
                                  />
                                  {template.isPremium && (
                                    <div className="absolute top-2 right-2 bg-yellow-500 text-black px-2 py-1 rounded-full text-xs font-medium flex items-center gap-1">
                                      <Icon icon="lucide:crown" className="w-3 h-3" />
                                      <span>Pro</span>
                                    </div>
                                  )}
                                </div>
                                <div className="p-4">
                                  <h3 className="font-medium mb-1">{template.name}</h3>
                                  <p className="text-default-500 text-sm mb-3 line-clamp-2">
                                    {template.description}
                                  </p>
                                  <div className="flex items-center justify-between">
                                    <div className="flex items-center gap-2">
                                      <div className="flex items-center gap-1">
                                        {[...Array(5)].map((_, i) => (
                                          <Icon
                                            key={i}
                                            icon="lucide:star"
                                            className={`w-3 h-3 ${
                                              i < Math.floor(template.rating)
                                                ? "text-yellow-400 fill-current"
                                                : "text-default-300"
                                            }`}
                                          />
                                        ))}
                                      </div>
                                      <span className="text-xs text-default-500">{template.rating}</span>
                                    </div>
                                    <div className="text-xs text-default-500">
                                      {template.downloads} downloads
                                    </div>
                                  </div>
                                </div>
                              </>
                            ) : (
                              <>
                                <div className="w-20 h-16 bg-gradient-to-br from-purple-500/20 to-pink-500/20 rounded-lg flex items-center justify-center relative">
                                  <img 
                                    src={`https://img.heroui.chat/image/${template.preview}?w=80&h=64&u=${template.id}`}
                                    alt={template.name}
                                    className="w-full h-full object-cover rounded-lg"
                                  />
                                  {template.isPremium && (
                                    <Icon
                                      icon="lucide:crown"
                                      className="absolute -top-1 -right-1 w-4 h-4 text-yellow-500"
                                    />
                                  )}
                                </div>
                                <div className="flex-1">
                                  <div className="flex items-center justify-between mb-1">
                                    <h3 className="font-medium">{template.name}</h3>
                                    <div className="flex items-center gap-2">
                                      <div className="flex items-center gap-1">
                                        {[...Array(5)].map((_, i) => (
                                          <Icon
                                            key={i}
                                            icon="lucide:star"
                                            className={`w-3 h-3 ${
                                              i < Math.floor(template.rating)
                                                ? "text-yellow-400 fill-current"
                                                : "text-default-300"
                                            }`}
                                          />
                                        ))}
                                      </div>
                                      <span className="text-xs text-default-500">{template.rating}</span>
                                    </div>
                                  </div>
                                  <p className="text-default-500 text-sm mb-2">{template.description}</p>
                                  <div className="flex items-center justify-between">
                                    <span className="text-xs text-default-500">{template.category}</span>
                                    <span className="text-xs text-default-500">
                                      {template.downloads} downloads
                                    </span>
                                  </div>
                                </div>
                              </>
                            )}
                          </motion.div>
                        ))}
                      </AnimatePresence>
                    </div>
                  )}
                </div>
              </ModalBody>
            </>
          )}
        </ModalContent>
      </Modal>

      {/* Export Modal */}
      <Modal 
        isOpen={isExportModalOpen} 
        onOpenChange={onExportModalOpenChange}
        size="md"
        backdrop="blur"
      >
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader className="flex flex-col gap-1">
                <h2 className="text-xl font-bold">Export Card</h2>
              </ModalHeader>
              <ModalBody>
                <div className="space-y-4">
                  <Button
                    color="primary"
                    fullWidth
                    startContent={<Icon icon="lucide:download" className="w-5 h-5" />}
                    onPress={exportCard}
                  >
                    Export as JSON
                  </Button>

                  <Button
                    color="success"
                    fullWidth
                    startContent={<Icon icon="lucide:code" className="w-5 h-5" />}
                    onPress={() => {
                      navigator.clipboard.writeText(`/* Card Styles */
.card {
  width: ${cardStyle.width}px;
  height: ${cardStyle.height === "auto" ? "auto" : `${cardStyle.height}px`};
  background: ${cardStyle.background};
  border-radius: ${cardStyle.borderRadius}px;
  box-shadow: ${cardStyle.boxShadow};
  padding: ${cardStyle.padding}px;
  opacity: ${cardStyle.opacity};
  color: ${cardStyle.color};
  transition: all 0.3s ease;
}

.card:hover {
  transform: translateY(-8px) scale(1.02);
}`);
                      onClose();
                    }}
                  >
                    Copy CSS
                  </Button>

                  <Button
                    color="warning"
                    fullWidth
                    startContent={<Icon icon="lucide:image" className="w-5 h-5" />}
                    onPress={() => {
                      // This would typically trigger a screenshot or canvas export
                      console.log("Export as PNG - Feature coming soon!");
                      onClose();
                    }}
                  >
                    Export as PNG
                  </Button>
                </div>
              </ModalBody>
              <ModalFooter>
                <Button color="danger" variant="light" onPress={onClose}>
                  Cancel
                </Button>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>

      {/* Floating Control Panel Modal */}
      <Modal 
        isOpen={isFloatingPanelOpen} 
        onOpenChange={onFloatingPanelOpenChange}
        size="lg"
        backdrop="blur"
      >
        <ModalContent>
          {(onClose) => (
            <>
              <ModalHeader className="flex flex-col gap-1">
                <div className="flex items-center gap-3">
                  <div className={`p-2 rounded-lg ${
                    floatingPanelMode === "style" ? "bg-blue-500/20" : 
                    floatingPanelMode === "gradient" ? "bg-pink-500/20" : 
                    "bg-green-500/20"
                  }`}>
                    <Icon 
                      icon={
                        floatingPanelMode === "style" ? "lucide:palette" : 
                        floatingPanelMode === "gradient" ? "lucide:layers" : 
                        "lucide:box"
                      } 
                      className={`w-5 h-5 ${
                        floatingPanelMode === "style" ? "text-blue-500" : 
                        floatingPanelMode === "gradient" ? "text-pink-500" : 
                        "text-green-500"
                      }`} 
                    />
                  </div>
                  <div>
                    <h2 className="text-xl font-bold">
                      {floatingPanelMode === "style" ? "Style Controls" : 
                       floatingPanelMode === "gradient" ? "Gradient Builder" : 
                       "3D Shadow"}
                    </h2>
                    <p className="text-default-500 text-sm">
                      {floatingPanelMode === "style" ? "Customize your card design" : 
                       floatingPanelMode === "gradient" ? "Create beautiful gradients" : 
                       "Advanced shadow effects"}
                    </p>
                  </div>
                </div>
              </ModalHeader>
              <ModalBody>
                {floatingPanelMode === "style" && (
                  <div className="space-y-6">
                    {/* Background Type */}
                    <div className="bg-content2 border border-default-200 rounded-xl p-5">
                      <div className="flex items-center gap-2 mb-4">
                        <Icon icon="lucide:palette" className="w-4 h-4 text-primary" />
                        <h3 className="text-sm font-semibold">Background Type</h3>
                      </div>
                      <div className="grid grid-cols-2 gap-3">
                        {[
                          { key: "solid", label: "Solid", icon: "lucide:circle" },
                          { key: "gradient", label: "Gradient", icon: "lucide:square" },
                        ].map((type) => (
                          <motion.button
                            key={type.key}
                            className={`p-4 rounded-xl border transition-all duration-200 ${
                              type.key === "gradient"
                                ? "bg-primary/20 border-primary"
                                : "bg-content1 border-default-200 hover:bg-content2"
                            }`}
                            whileHover={{ scale: 1.02 }}
                            whileTap={{ scale: 0.98 }}
                          >
                            <Icon icon={type.icon} className="w-5 h-5 mx-auto mb-2" />
                            <div className="text-xs font-medium">{type.label}</div>
                          </motion.button>
                        ))}
                      </div>
                    </div>

                    {/* Dimensions */}
                    <div className="bg-content2 border border-default-200 rounded-xl p-5">
                      <div className="flex items-center gap-2 mb-4">
                        <Icon icon="lucide:maximize-2" className="w-4 h-4 text-primary" />
                        <h3 className="text-sm font-semibold">Dimensions</h3>
                      </div>
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <label className="block text-xs text-default-500 mb-2">Width</label>
                          <input
                            type="range"
                            min="200"
                            max="500"
                            value={activeCard.cardWidth}
                            onChange={(e) => updateCard({ cardWidth: e.target.value })}
                            className="w-full accent-primary"
                          />
                          <div className="text-xs text-primary mt-1">{activeCard.cardWidth}px</div>
                        </div>
                        <div>
                          <label className="block text-xs text-default-500 mb-2">Height</label>
                          <input
                            type="range"
                            min="100"
                            max="400"
                            value={activeCard.cardHeight}
                            onChange={(e) => updateCard({ cardHeight: e.target.value })}
                            className="w-full accent-primary"
                          />
                          <div className="text-xs text-primary mt-1">{activeCard.cardHeight}px</div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {floatingPanelMode === "gradient" && (
                  <div className="space-y-6">
                    {/* Gradient Preview */}
                    <div>
                      <label className="block text-sm font-medium mb-3">Gradient Preview</label>
                      <div
                        className="w-full h-20 rounded-xl border border-default-200"
                        style={{
                          background: `linear-gradient(${gradientAngle}deg, ${startColor}, ${endColor})`,
                        }}
                      />
                    </div>

                    {/* Color Controls */}
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium mb-2">Start Color</label>
                        <div className="flex items-center gap-2">
                          <div
                            className="w-10 h-10 rounded-lg border border-default-200 cursor-pointer"
                            style={{ backgroundColor: startColor }}
                          >
                            <input
                              type="color"
                              value={startColor}
                              onChange={(e) => {
                                setStartColor(e.target.value);
                                updateCard({ bgGradientFrom: e.target.value });
                              }}
                              className="w-full h-full opacity-0 cursor-pointer"
                            />
                          </div>
                          <div className="flex-1">
                            <input
                              type="range"
                              min="0"
                              max="100"
                              value={startOpacity}
                              onChange={(e) => {
                                const opacity = Number(e.target.value);
                                setStartOpacity(opacity);
                                updateCard({ bgOpacityFrom: (opacity / 100).toString() });
                              }}
                              className="w-full accent-primary"
                            />
                            <div className="text-xs text-default-500">{startOpacity}%</div>
                          </div>
                        </div>
                      </div>

                      <div>
                        <label className="block text-sm font-medium mb-2">End Color</label>
                        <div className="flex items-center gap-2">
                          <div
                            className="w-10 h-10 rounded-lg border border-default-200 cursor-pointer"
                            style={{ backgroundColor: endColor }}
                          >
                            <input
                              type="color"
                              value={endColor}
                              onChange={(e) => {
                                setEndColor(e.target.value);
                                updateCard({ bgGradientTo: e.target.value });
                              }}
                              className="w-full h-full opacity-0 cursor-pointer"
                            />
                          </div>
                          <div className="flex-1">
                            <input
                              type="range"
                              min="0"
                              max="100"
                              value={endOpacity}
                              onChange={(e) => {
                                const opacity = Number(e.target.value);
                                setEndOpacity(opacity);
                                updateCard({ bgOpacityTo: (opacity / 100).toString() });
                              }}
                              className="w-full accent-primary"
                            />
                            <div className="text-xs text-default-500">{endOpacity}%</div>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Gradient Direction */}
                    <div>
                      <label className="block text-sm font-medium mb-3">Direction</label>
                      <div className="flex items-center justify-center">
                        <div className="relative w-24 h-24">
                          <div className="absolute inset-0 rounded-full border-2 border-default-200" />
                          <motion.div
                            className="absolute w-2 h-8 bg-primary rounded-full origin-bottom cursor-pointer"
                            style={{
                              left: "50%",
                              bottom: "50%",
                              marginLeft: "-4px",
                              transform: `rotate(${gradientAngle}deg)`,
                            }}
                            drag
                            dragConstraints={{ left: 0, right: 0, top: 0, bottom: 0 }}
                            onDrag={(event, info) => {
                              const rect = (event.target as HTMLElement).parentElement?.getBoundingClientRect();
                              if (rect) {
                                const centerX = rect.width / 2;
                                const centerY = rect.height / 2;
                                const x = info.point.x - rect.left - centerX;
                                const y = info.point.y - rect.top - centerY;
                                const newAngle = (Math.atan2(y, x) * 180) / Math.PI + 90;
                                setGradientAngle(Math.round(newAngle));
                              }
                            }}
                          />
                          <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
                            <Icon icon="lucide:rotate-cw" className="w-4 h-4 text-default-400" />
                          </div>
                        </div>
                      </div>
                      <div className="text-center text-xs text-default-500 mt-2">{gradientAngle}°</div>
                    </div>
                  </div>
                )}

                {floatingPanelMode === "shadow" && (
                  <div className="space-y-8">
                    {/* Primary Shadow */}
                    <div className="space-y-4">
                      <div className="flex items-center justify-between">
                        <h3 className="text-lg font-medium">Primary Shadow</h3>
                        <Switch
                          isSelected={primaryShadow.enabled}
                          onValueChange={(enabled) => setPrimaryShadow({ ...primaryShadow, enabled })}
                          size="sm"
                          color="primary"
                        />
                      </div>

                      {primaryShadow.enabled && (
                        <div className="space-y-4">
                          <div className="grid grid-cols-2 gap-4">
                            <div>
                              <label className="block text-sm font-medium mb-2">Blur</label>
                              <input
                                type="range"
                                min="0"
                                max="100"
                                value={primaryShadow.blur}
                                onChange={(e) => {
                                  const blur = Number(e.target.value);
                                  setPrimaryShadow({ ...primaryShadow, blur });
                                  updateCard({ 
                                    shadowSettings: { 
                                      ...activeCard.shadowSettings, 
                                      blur: blur.toString() 
                                    } 
                                  });
                                }}
                                className="w-full accent-primary"
                              />
                              <div className="text-xs text-default-500 mt-1">{primaryShadow.blur}px</div>
                            </div>
                            <div>
                              <label className="block text-sm font-medium mb-2">Spread</label>
                              <input
                                type="range"
                                min="-20"
                                max="20"
                                value={primaryShadow.spread}
                                onChange={(e) => {
                                  const spread = Number(e.target.value);
                                  setPrimaryShadow({ ...primaryShadow, spread });
                                  updateCard({ 
                                    shadowSettings: { 
                                      ...activeCard.shadowSettings, 
                                      spread: spread.toString() 
                                    } 
                                  });
                                }}
                                className="w-full accent-primary"
                              />
                              <div className="text-xs text-default-500 mt-1">{primaryShadow.spread}px</div>
                            </div>
                          </div>

                          <div className="flex items-center gap-3">
                            <div
                              className="w-12 h-12 rounded-xl border border-default-200 cursor-pointer"
                              style={{ backgroundColor: primaryShadow.color }}
                            >
                              <input
                                type="color"
                                value={primaryShadow.color}
                                onChange={(e) => {
                                  setPrimaryShadow({ ...primaryShadow, color: e.target.value });
                                  updateCard({ shadowColor: e.target.value });
                                }}
                                className="w-full h-full opacity-0 cursor-pointer"
                              />
                            </div>
                            <div className="flex-1">
                              <input
                                type="range"
                                min="0"
                                max="100"
                                value={primaryShadow.opacity}
                                onChange={(e) => {
                                  const opacity = Number(e.target.value);
                                  setPrimaryShadow({ ...primaryShadow, opacity });
                                  updateCard({ shadowOpacity: (opacity / 100).toString() });
                                }}
                                className="w-full accent-primary"
                              />
                              <div className="text-xs text-default-500 mt-1">Opacity: {primaryShadow.opacity}%</div>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </ModalBody>
              <ModalFooter>
                <Button color="danger" variant="light" onPress={onClose}>
                  Close
                </Button>
                <Button color="primary" onPress={onClose}>
                  Apply
                </Button>
              </ModalFooter>
            </>
          )}
        </ModalContent>
      </Modal>
    </div>
  );
}